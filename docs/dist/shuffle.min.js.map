{"version":3,"file":"shuffle.min.js","sources":["../node_modules/tiny-emitter/index.js","../node_modules/matches-selector/index.js","../node_modules/throttleit/index.js","../node_modules/array-parallel/index.js","../src/get-number.js","../src/point.js","../src/rect.js","../src/classes.js","../src/shuffle-item.js","../src/computed-size.js","../src/get-number-style.js","../src/sorter.js","../src/on-transition-end.js","../src/array-max.js","../src/layout.js","../src/array-min.js","../src/shuffle.js","../src/hyphenate.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\n","'use strict';\n\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nmodule.exports = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n","module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","module.exports = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context\n      context = null\n    } else {\n      callback = noop\n    }\n  }\n\n  var pending = fns && fns.length\n  if (!pending) return callback(null, []);\n\n  var finished = false\n  var results = new Array(pending)\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i))\n  } : function (fn, i) {\n    fn(maybeDone(i))\n  })\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results)\n        finished = true\n        return\n      }\n\n      results[i] = result\n\n      if (!--pending) callback(null, results);\n    }\n  }\n}\n\nfunction noop() {}\n","/**\r\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\r\n * @param {*} value Possibly numeric value.\r\n * @return {number} `value` or zero if `value` isn't numeric.\r\n */\r\nexport default function getNumber(value) {\r\n  return parseFloat(value) || 0;\r\n}\r\n","import getNumber from './get-number';\r\n\r\nclass Point {\r\n  /**\r\n   * Represents a coordinate pair.\r\n   * @param {number} [x=0] X.\r\n   * @param {number} [y=0] Y.\r\n   */\r\n  constructor(x, y) {\r\n    this.x = getNumber(x);\r\n    this.y = getNumber(y);\r\n  }\r\n\r\n  /**\r\n   * Whether two points are equal.\r\n   * @param {Point} a Point A.\r\n   * @param {Point} b Point B.\r\n   * @return {boolean}\r\n   */\r\n  static equals(a, b) {\r\n    return a.x === b.x && a.y === b.y;\r\n  }\r\n}\r\n\r\nexport default Point;\r\n","export default class Rect {\r\n  /**\r\n   * Class for representing rectangular regions.\r\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\r\n   * @param {number} x Left.\r\n   * @param {number} y Top.\r\n   * @param {number} w Width.\r\n   * @param {number} h Height.\r\n   * @param {number} id Identifier\r\n   * @constructor\r\n   */\r\n  constructor(x, y, w, h, id) {\r\n    this.id = id;\r\n\r\n    /** @type {number} */\r\n    this.left = x;\r\n\r\n    /** @type {number} */\r\n    this.top = y;\r\n\r\n    /** @type {number} */\r\n    this.width = w;\r\n\r\n    /** @type {number} */\r\n    this.height = h;\r\n  }\r\n\r\n  /**\r\n   * Returns whether two rectangles intersect.\r\n   * @param {Rect} a A Rectangle.\r\n   * @param {Rect} b A Rectangle.\r\n   * @return {boolean} Whether a and b intersect.\r\n   */\r\n  static intersects(a, b) {\r\n    return (\r\n      a.left < b.left + b.width && b.left < a.left + a.width &&\r\n      a.top < b.top + b.height && b.top < a.top + a.height);\r\n  }\r\n}\r\n","export default {\r\n  BASE: 'shuffle',\r\n  SHUFFLE_ITEM: 'shuffle-item',\r\n  VISIBLE: 'shuffle-item--visible',\r\n  HIDDEN: 'shuffle-item--hidden',\r\n};\r\n","import Point from './point';\r\nimport Classes from './classes';\r\n\r\nlet id = 0;\r\n\r\nclass ShuffleItem {\r\n  constructor(element) {\r\n    id += 1;\r\n    this.id = id;\r\n    this.element = element;\r\n\r\n    /**\r\n     * Used to separate items for layout and shrink.\r\n     */\r\n    this.isVisible = true;\r\n\r\n    /**\r\n     * Used to determine if a transition will happen. By the time the _layout\r\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\r\n     * has already been changed by the separation methods, so this property is\r\n     * needed to know if the item was visible/hidden before the shrink/layout.\r\n     */\r\n    this.isHidden = false;\r\n  }\r\n\r\n  show() {\r\n    this.isVisible = true;\r\n    this.element.classList.remove(Classes.HIDDEN);\r\n    this.element.classList.add(Classes.VISIBLE);\r\n    this.element.removeAttribute('aria-hidden');\r\n  }\r\n\r\n  hide() {\r\n    this.isVisible = false;\r\n    this.element.classList.remove(Classes.VISIBLE);\r\n    this.element.classList.add(Classes.HIDDEN);\r\n    this.element.setAttribute('aria-hidden', true);\r\n  }\r\n\r\n  init() {\r\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\r\n    this.applyCss(ShuffleItem.Css.INITIAL);\r\n    this.scale = ShuffleItem.Scale.VISIBLE;\r\n    this.point = new Point();\r\n  }\r\n\r\n  addClasses(classes) {\r\n    classes.forEach((className) => {\r\n      this.element.classList.add(className);\r\n    });\r\n  }\r\n\r\n  removeClasses(classes) {\r\n    classes.forEach((className) => {\r\n      this.element.classList.remove(className);\r\n    });\r\n  }\r\n\r\n  applyCss(obj) {\r\n    Object.keys(obj).forEach((key) => {\r\n      this.element.style[key] = obj[key];\r\n    });\r\n  }\r\n\r\n  dispose() {\r\n    this.removeClasses([\r\n      Classes.HIDDEN,\r\n      Classes.VISIBLE,\r\n      Classes.SHUFFLE_ITEM,\r\n    ]);\r\n\r\n    this.element.removeAttribute('style');\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nShuffleItem.Css = {\r\n  INITIAL: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    visibility: 'visible',\r\n    'will-change': 'transform',\r\n  },\r\n  VISIBLE: {\r\n    before: {\r\n      opacity: 1,\r\n      visibility: 'visible',\r\n    },\r\n    after: {\r\n      transitionDelay: '',\r\n    },\r\n  },\r\n  HIDDEN: {\r\n    before: {\r\n      opacity: 0,\r\n    },\r\n    after: {\r\n      visibility: 'hidden',\r\n      transitionDelay: '',\r\n    },\r\n  },\r\n};\r\n\r\nShuffleItem.Scale = {\r\n  VISIBLE: 1,\r\n  HIDDEN: 0.001,\r\n};\r\n\r\nexport default ShuffleItem;\r\n","const computedSize = () => {\r\n    if ( typeof document !== 'undefined' ) {\r\n        const element = document.body || document.documentElement;\r\n        const e = document.createElement('div');\r\n        e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\r\n        element.appendChild(e);\r\n        const { width } = window.getComputedStyle(e, null);\r\n        element.removeChild(e);\r\n        return width === '10px';\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nexport default ret = computedSize();\r\n","import getNumber from './get-number';\r\nimport COMPUTED_SIZE_INCLUDES_PADDING from './computed-size';\r\n\r\n/**\r\n * Retrieve the computed style for an element, parsed as a float.\r\n * @param {Element} element Element to get style for.\r\n * @param {string} style Style property.\r\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\r\n *     use instead of asking for them again.\r\n * @return {number} The parsed computed value or zero if that fails because IE\r\n *     will return 'auto' when the element doesn't have margins instead of\r\n *     the computed style.\r\n */\r\nexport default function getNumberStyle(\r\n  element, style,\r\n  styles = window.getComputedStyle(element, null),\r\n) {\r\n  let value = getNumber(styles[style]);\r\n\r\n  // Support IE<=11 and W3C spec.\r\n  if (!COMPUTED_SIZE_INCLUDES_PADDING && style === 'width') {\r\n    value += getNumber(styles.paddingLeft) +\r\n      getNumber(styles.paddingRight) +\r\n      getNumber(styles.borderLeftWidth) +\r\n      getNumber(styles.borderRightWidth);\r\n  } else if (!COMPUTED_SIZE_INCLUDES_PADDING && style === 'height') {\r\n    value += getNumber(styles.paddingTop) +\r\n      getNumber(styles.paddingBottom) +\r\n      getNumber(styles.borderTopWidth) +\r\n      getNumber(styles.borderBottomWidth);\r\n  }\r\n\r\n  return value;\r\n}\r\n","/**\r\n * Fisher-Yates shuffle.\r\n * http://stackoverflow.com/a/962890/373422\r\n * https://bost.ocks.org/mike/shuffle/\r\n * @param {Array} array Array to shuffle.\r\n * @return {Array} Randomly sorted array.\r\n */\r\nfunction randomize(array) {\r\n  let n = array.length;\r\n\r\n  while (n) {\r\n    n -= 1;\r\n    const i = Math.floor(Math.random() * (n + 1));\r\n    const temp = array[i];\r\n    array[i] = array[n];\r\n    array[n] = temp;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nconst defaults = {\r\n  // Use array.reverse() to reverse the results\r\n  reverse: false,\r\n\r\n  // Sorting function\r\n  by: null,\r\n\r\n  // If true, this will skip the sorting and return a randomized order in the array\r\n  randomize: false,\r\n\r\n  // Determines which property of each item in the array is passed to the\r\n  // sorting method.\r\n  key: 'element',\r\n};\r\n\r\n// You can return `undefined` from the `by` function to revert to DOM order.\r\nexport default function sorter(arr, options) {\r\n  const opts = Object.assign({}, defaults, options);\r\n  const original = Array.from(arr);\r\n  let revert = false;\r\n\r\n  if (!arr.length) {\r\n    return [];\r\n  }\r\n\r\n  if (opts.randomize) {\r\n    return randomize(arr);\r\n  }\r\n\r\n  // Sort the elements by the opts.by function.\r\n  // If we don't have opts.by, default to DOM order\r\n  if (typeof opts.by === 'function') {\r\n    arr.sort((a, b) => {\r\n      // Exit early if we already know we want to revert\r\n      if (revert) {\r\n        return 0;\r\n      }\r\n\r\n      const valA = opts.by(a[opts.key]);\r\n      const valB = opts.by(b[opts.key]);\r\n\r\n      // If both values are undefined, use the DOM order\r\n      if (valA === undefined && valB === undefined) {\r\n        revert = true;\r\n        return 0;\r\n      }\r\n\r\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\r\n        return -1;\r\n      }\r\n\r\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\r\n        return 1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  // Revert to the original array if necessary\r\n  if (revert) {\r\n    return original;\r\n  }\r\n\r\n  if (opts.reverse) {\r\n    arr.reverse();\r\n  }\r\n\r\n  return arr;\r\n}\r\n","const transitions = {};\r\nconst eventName = 'transitionend';\r\nlet count = 0;\r\n\r\nfunction uniqueId() {\r\n  count += 1;\r\n  return eventName + count;\r\n}\r\n\r\nexport function cancelTransitionEnd(id) {\r\n  if (transitions[id]) {\r\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\r\n    transitions[id] = null;\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function onTransitionEnd(element, callback) {\r\n  const id = uniqueId();\r\n  const listener = (evt) => {\r\n    if (evt.currentTarget === evt.target) {\r\n      cancelTransitionEnd(id);\r\n      callback(evt);\r\n    }\r\n  };\r\n\r\n  element.addEventListener(eventName, listener);\r\n\r\n  transitions[id] = { element, listener };\r\n\r\n  return id;\r\n}\r\n","export default function arrayMax(array) {\r\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\r\n}\r\n","import Point from './point';\r\nimport Rect from './rect';\r\nimport arrayMax from './array-max';\r\nimport arrayMin from './array-min';\r\n\r\n/**\r\n * Determine the number of columns an items spans.\r\n * @param {number} itemWidth Width of the item.\r\n * @param {number} columnWidth Width of the column (includes gutter).\r\n * @param {number} columns Total number of columns\r\n * @param {number} threshold A buffer value for the size of the column to fit.\r\n * @return {number}\r\n */\r\nexport function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\r\n  let columnSpan = itemWidth / columnWidth;\r\n\r\n  // If the difference between the rounded column span number and the\r\n  // calculated column span number is really small, round the number to\r\n  // make it fit.\r\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\r\n    // e.g. columnSpan = 4.0089945390298745\r\n    columnSpan = Math.round(columnSpan);\r\n  }\r\n\r\n  // Ensure the column span is not more than the amount of columns in the whole layout.\r\n  return Math.min(Math.ceil(columnSpan), columns);\r\n}\r\n\r\n/**\r\n * Retrieves the column set to use for placement.\r\n * @param {number} columnSpan The number of columns this current item spans.\r\n * @param {number} columns The total columns in the grid.\r\n * @return {Array.<number>} An array of numbers represeting the column set.\r\n */\r\nexport function getAvailablePositions(positions, columnSpan, columns) {\r\n  // The item spans only one column.\r\n  if (columnSpan === 1) {\r\n    return positions;\r\n  }\r\n\r\n  // The item spans more than one column, figure out how many different\r\n  // places it could fit horizontally.\r\n  // The group count is the number of places within the positions this block\r\n  // could fit, ignoring the current positions of items.\r\n  // Imagine a 2 column brick as the second item in a 4 column grid with\r\n  // 10px height each. Find the places it would fit:\r\n  // [20, 10, 10, 0]\r\n  //  |   |   |\r\n  //  *   *   *\r\n  //\r\n  // Then take the places which fit and get the bigger of the two:\r\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\r\n  //\r\n  // Next, find the first smallest number (the short column).\r\n  // [20, 10, 10]\r\n  //      |\r\n  //      *\r\n  //\r\n  // And that's where it should be placed!\r\n  //\r\n  // Another example where the second column's item extends past the first:\r\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\r\n  const available = [];\r\n\r\n  // For how many possible positions for this item there are.\r\n  for (let i = 0; i <= columns - columnSpan; i++) {\r\n    // Find the bigger value for each place it could fit.\r\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\r\n  }\r\n\r\n  return available;\r\n}\r\n\r\n/**\r\n * Find index of short column, the first from the left where this item will go.\r\n *\r\n * @param {Array.<number>} positions The array to search for the smallest number.\r\n * @param {number} buffer Optional buffer which is very useful when the height\r\n *     is a percentage of the width.\r\n * @return {number} Index of the short column.\r\n */\r\nexport function getShortColumn(positions, buffer) {\r\n  const minPosition = arrayMin(positions);\r\n  for (let i = 0, len = positions.length; i < len; i++) {\r\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Determine the location of the next item, based on its size.\r\n * @param {Object} itemSize Object with width and height.\r\n * @param {Array.<number>} positions Positions of the other current items.\r\n * @param {number} gridSize The column width or row height.\r\n * @param {number} total The total number of columns or rows.\r\n * @param {number} threshold Buffer value for the column to fit.\r\n * @param {number} buffer Vertical buffer for the height of items.\r\n * @return {Point}\r\n */\r\nexport function getItemPosition({\r\n  itemSize, positions, gridSize, total, threshold, buffer,\r\n}) {\r\n  const span = getColumnSpan(itemSize.width, gridSize, total, threshold);\r\n  const setY = getAvailablePositions(positions, span, total);\r\n  const shortColumnIndex = getShortColumn(setY, buffer);\r\n\r\n  // Position the item\r\n  const point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]);\r\n\r\n  // Update the columns array with the new values for each column.\r\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\r\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\r\n  const setHeight = setY[shortColumnIndex] + itemSize.height;\r\n  for (let i = 0; i < span; i++) {\r\n    positions[shortColumnIndex + i] = setHeight;\r\n  }\r\n\r\n  return point;\r\n}\r\n\r\n/**\r\n * This method attempts to center items. This method could potentially be slow\r\n * with a large number of items because it must place items, then check every\r\n * previous item to ensure there is no overlap.\r\n * @param {Array.<Rect>} itemRects Item data objects.\r\n * @param {number} containerWidth Width of the containing element.\r\n * @return {Array.<Point>}\r\n */\r\nexport function getCenteredPositions(itemRects, containerWidth) {\r\n  const rowMap = {};\r\n\r\n  // Populate rows by their offset because items could jump between rows like:\r\n  // a   c\r\n  //  bbb\r\n  itemRects.forEach((itemRect) => {\r\n    if (rowMap[itemRect.top]) {\r\n      // Push the point to the last row array.\r\n      rowMap[itemRect.top].push(itemRect);\r\n    } else {\r\n      // Start of a new row.\r\n      rowMap[itemRect.top] = [itemRect];\r\n    }\r\n  });\r\n\r\n  // For each row, find the end of the last item, then calculate\r\n  // the remaining space by dividing it by 2. Then add that\r\n  // offset to the x position of each point.\r\n  let rects = [];\r\n  const rows = [];\r\n  const centeredRows = [];\r\n  Object.keys(rowMap).forEach((key) => {\r\n    const itemRects = rowMap[key];\r\n    rows.push(itemRects);\r\n    const lastItem = itemRects[itemRects.length - 1];\r\n    const end = lastItem.left + lastItem.width;\r\n    const offset = Math.round((containerWidth - end) / 2);\r\n\r\n    let finalRects = itemRects;\r\n    let canMove = false;\r\n    if (offset > 0) {\r\n      const newRects = [];\r\n      canMove = itemRects.every((r) => {\r\n        const newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id);\r\n\r\n        // Check all current rects to make sure none overlap.\r\n        const noOverlap = !rects.some(r => Rect.intersects(newRect, r));\r\n\r\n        newRects.push(newRect);\r\n        return noOverlap;\r\n      });\r\n\r\n      // If none of the rectangles overlapped, the whole group can be centered.\r\n      if (canMove) {\r\n        finalRects = newRects;\r\n      }\r\n    }\r\n\r\n    // If the items are not going to be offset, ensure that the original\r\n    // placement for this row will not overlap previous rows (row-spanning\r\n    // elements could be in the way).\r\n    if (!canMove) {\r\n      let intersectingRect;\r\n      const hasOverlap = itemRects.some(itemRect => rects.some((r) => {\r\n        const intersects = Rect.intersects(itemRect, r);\r\n        if (intersects) {\r\n          intersectingRect = r;\r\n        }\r\n        return intersects;\r\n      }));\r\n\r\n      // If there is any overlap, replace the overlapping row with the original.\r\n      if (hasOverlap) {\r\n        const rowIndex = centeredRows.findIndex(items => items.includes(intersectingRect));\r\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\r\n      }\r\n    }\r\n\r\n    rects = rects.concat(finalRects);\r\n    centeredRows.push(finalRects);\r\n  });\r\n\r\n  // Reduce array of arrays to a single array of points.\r\n  // https://stackoverflow.com/a/10865042/373422\r\n  // Then reset sort back to how the items were passed to this method.\r\n  // Remove the wrapper object with index, map to a Point.\r\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\r\n    .sort((a, b) => (a.id - b.id))\r\n    .map(itemRect => new Point(itemRect.left, itemRect.top));\r\n}\r\n","export default function arrayMin(array) {\r\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\r\n}\r\n","import TinyEmitter from 'tiny-emitter';\r\nimport matches from 'matches-selector';\r\nimport throttle from 'throttleit';\r\nimport parallel from 'array-parallel';\r\n\r\nimport Point from './point';\r\nimport Rect from './rect';\r\nimport ShuffleItem from './shuffle-item';\r\nimport Classes from './classes';\r\nimport getNumberStyle from './get-number-style';\r\nimport sorter from './sorter';\r\nimport { onTransitionEnd, cancelTransitionEnd } from './on-transition-end';\r\nimport {\r\n  getItemPosition,\r\n  getColumnSpan,\r\n  getAvailablePositions,\r\n  getShortColumn,\r\n  getCenteredPositions,\r\n} from './layout';\r\nimport arrayMax from './array-max';\r\nimport hyphenate from './hyphenate';\r\n\r\nfunction arrayUnique(x) {\r\n  return Array.from(new Set(x));\r\n}\r\n\r\n// Used for unique instance variables\r\nlet id = 0;\r\n\r\nclass Shuffle extends TinyEmitter {\r\n  /**\r\n   * Categorize, sort, and filter a responsive grid of items.\r\n   *\r\n   * @param {Element} element An element which is the parent container for the grid items.\r\n   * @param {Object} [options=Shuffle.options] Options object.\r\n   * @constructor\r\n   */\r\n  constructor(element, options = {}) {\r\n    super();\r\n    this.options = Object.assign({}, Shuffle.options, options);\r\n\r\n    this.lastSort = {};\r\n    this.group = Shuffle.ALL_ITEMS;\r\n    this.lastFilter = Shuffle.ALL_ITEMS;\r\n    this.isEnabled = true;\r\n    this.isDestroyed = false;\r\n    this.isInitialized = false;\r\n    this._transitions = [];\r\n    this.isTransitioning = false;\r\n    this._queue = [];\r\n\r\n    const el = this._getElementOption(element);\r\n\r\n    if (!el) {\r\n      throw new TypeError('Shuffle needs to be initialized with an element.');\r\n    }\r\n\r\n    this.element = el;\r\n    this.id = 'shuffle_' + id;\r\n    id += 1;\r\n\r\n    this._init();\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  _init() {\r\n    this.items = this._getItems();\r\n\r\n    this.options.sizer = this._getElementOption(this.options.sizer);\r\n\r\n    // Add class and invalidate styles\r\n    this.element.classList.add(Shuffle.Classes.BASE);\r\n\r\n    // Set initial css for each item\r\n    this._initItems(this.items);\r\n\r\n    // Bind resize events\r\n    this._onResize = this._getResizeFunction();\r\n    window.addEventListener('resize', this._onResize);\r\n\r\n    // If the page has not already emitted the `load` event, call layout on load.\r\n    // This avoids layout issues caused by images and fonts loading after the\r\n    // instance has been initialized.\r\n    if (document.readyState !== 'complete') {\r\n      const layout = this.layout.bind(this);\r\n      window.addEventListener('load', function onLoad() {\r\n        window.removeEventListener('load', onLoad);\r\n        layout();\r\n      });\r\n    }\r\n\r\n    // Get container css all in one request. Causes reflow\r\n    const containerCss = window.getComputedStyle(this.element, null);\r\n    const containerWidth = Shuffle.getSize(this.element).width;\r\n\r\n    // Add styles to the container if it doesn't have them.\r\n    this._validateStyles(containerCss);\r\n\r\n    // We already got the container's width above, no need to cause another\r\n    // reflow getting it again... Calculate the number of columns there will be\r\n    this._setColumns(containerWidth);\r\n\r\n    // Kick off!\r\n    this.filter(this.options.group, this.options.initialSort);\r\n\r\n    // The shuffle items haven't had transitions set on them yet so the user\r\n    // doesn't see the first layout. Set them now that the first layout is done.\r\n    // First, however, a synchronous layout must be caused for the previous\r\n    // styles to be applied without transitions.\r\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\r\n    this.setItemTransitions(this.items);\r\n    this.element.style.transition = `height ${this.options.speed}ms ${this.options.easing}`;\r\n  }\r\n\r\n  /**\r\n   * Returns a throttled and proxied function for the resize handler.\r\n   * @return {function}\r\n   * @private\r\n   */\r\n  _getResizeFunction() {\r\n    const resizeFunction = this._handleResize.bind(this);\r\n    return this.options.throttle ?\r\n      this.options.throttle(resizeFunction, this.options.throttleTime) :\r\n      resizeFunction;\r\n  }\r\n\r\n  /**\r\n   * Retrieve an element from an option.\r\n   * @param {string|jQuery|Element} option The option to check.\r\n   * @return {?Element} The plain element or null.\r\n   * @private\r\n   */\r\n  _getElementOption(option) {\r\n    // If column width is a string, treat is as a selector and search for the\r\n    // sizer element within the outermost container\r\n    if (typeof option === 'string') {\r\n      return this.element.querySelector(option);\r\n\r\n    // Check for an element\r\n    } else if (option && option.nodeType && option.nodeType === 1) {\r\n      return option;\r\n\r\n    // Check for jQuery object\r\n    } else if (option && option.jquery) {\r\n      return option[0];\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Ensures the shuffle container has the css styles it needs applied to it.\r\n   * @param {Object} styles Key value pairs for position and overflow.\r\n   * @private\r\n   */\r\n  _validateStyles(styles) {\r\n    // Position cannot be static.\r\n    if (styles.position === 'static') {\r\n      this.element.style.position = 'relative';\r\n    }\r\n\r\n    // Overflow has to be hidden.\r\n    if (styles.overflow !== 'hidden') {\r\n      this.element.style.overflow = 'hidden';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Filter the elements by a category.\r\n   * @param {string|string[]|function(Element):boolean} [category] Category to\r\n   *     filter by. If it's given, the last category will be used to filter the items.\r\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\r\n   *     all the items.\r\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\r\n   * @private\r\n   */\r\n  _filter(category = this.lastFilter, collection = this.items) {\r\n    const set = this._getFilteredSets(category, collection);\r\n\r\n    // Individually add/remove hidden/visible classes\r\n    this._toggleFilterClasses(set);\r\n\r\n    // Save the last filter in case elements are appended.\r\n    this.lastFilter = category;\r\n\r\n    // This is saved mainly because providing a filter function (like searching)\r\n    // will overwrite the `lastFilter` property every time its called.\r\n    if (typeof category === 'string') {\r\n      this.group = category;\r\n    }\r\n\r\n    return set;\r\n  }\r\n\r\n  /**\r\n   * Returns an object containing the visible and hidden elements.\r\n   * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\r\n   * @param {ShuffleItem[]} items A collection of items to filter.\r\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\r\n   * @private\r\n   */\r\n  _getFilteredSets(category, items) {\r\n    let visible = [];\r\n    const hidden = [];\r\n\r\n    // category === 'all', add visible class to everything\r\n    if (category === Shuffle.ALL_ITEMS) {\r\n      visible = items;\r\n\r\n    // Loop through each item and use provided function to determine\r\n    // whether to hide it or not.\r\n    } else {\r\n      items.forEach((item) => {\r\n        if (this._doesPassFilter(category, item.element)) {\r\n          visible.push(item);\r\n        } else {\r\n          hidden.push(item);\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      visible,\r\n      hidden,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test an item to see if it passes a category.\r\n   * @param {string|string[]|function():boolean} category Category or function to filter by.\r\n   * @param {Element} element An element to test.\r\n   * @return {boolean} Whether it passes the category/filter.\r\n   * @private\r\n   */\r\n  _doesPassFilter(category, element) {\r\n    if (typeof category === 'function') {\r\n      return category.call(element, element, this);\r\n    }\r\n\r\n    // Check each element's data-groups attribute against the given category.\r\n    const attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\r\n    const keys = this.options.delimeter ?\r\n      attr.split(this.options.delimeter) :\r\n      JSON.parse(attr);\r\n\r\n    function testCategory(category) {\r\n      return keys.includes(category);\r\n    }\r\n\r\n    if (Array.isArray(category)) {\r\n      if (this.options.filterMode === Shuffle.FilterMode.ANY) {\r\n        return category.some(testCategory);\r\n      }\r\n      return category.every(testCategory);\r\n    }\r\n\r\n    return keys.includes(category);\r\n  }\r\n\r\n  /**\r\n   * Toggles the visible and hidden class names.\r\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\r\n   * @private\r\n   */\r\n  _toggleFilterClasses({ visible, hidden }) {\r\n    visible.forEach((item) => {\r\n      item.show();\r\n    });\r\n\r\n    hidden.forEach((item) => {\r\n      item.hide();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set the initial css for each item\r\n   * @param {ShuffleItem[]} items Set to initialize.\r\n   * @private\r\n   */\r\n  _initItems(items) {\r\n    items.forEach((item) => {\r\n      item.init();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove element reference and styles.\r\n   * @param {ShuffleItem[]} items Set to dispose.\r\n   * @private\r\n   */\r\n  _disposeItems(items) {\r\n    items.forEach((item) => {\r\n      item.dispose();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the visible item count.\r\n   * @private\r\n   */\r\n  _updateItemCount() {\r\n    this.visibleItems = this._getFilteredItems().length;\r\n  }\r\n\r\n  /**\r\n   * Sets css transform transition on a group of elements. This is not executed\r\n   * at the same time as `item.init` so that transitions don't occur upon\r\n   * initialization of a new Shuffle instance.\r\n   * @param {ShuffleItem[]} items Shuffle items to set transitions on.\r\n   * @protected\r\n   */\r\n  setItemTransitions(items) {\r\n    const { speed, easing } = this.options;\r\n    const positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left'];\r\n\r\n    // Allow users to transtion other properties if they exist in the `before`\r\n    // css mapping of the shuffle item.\r\n    const cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map(k => hyphenate(k));\r\n    const properties = positionProps.concat(cssProps).join();\r\n\r\n    items.forEach((item) => {\r\n      item.element.style.transitionDuration = speed + 'ms';\r\n      item.element.style.transitionTimingFunction = easing;\r\n      item.element.style.transitionProperty = properties;\r\n    });\r\n  }\r\n\r\n  _getItems() {\r\n    return Array.from(this.element.children)\r\n      .filter(el => matches(el, this.options.itemSelector))\r\n      .map(el => new ShuffleItem(el));\r\n  }\r\n\r\n  /**\r\n   * When new elements are added to the shuffle container, update the array of\r\n   * items because that is the order `_layout` calls them.\r\n   * @param {ShuffleItem[]} items Items to track.\r\n   * @return {Shuffle[]}\r\n   */\r\n  _mergeNewItems(items) {\r\n    const children = Array.from(this.element.children);\r\n    return sorter(this.items.concat(items), {\r\n      by(element) {\r\n        return children.indexOf(element);\r\n      },\r\n    });\r\n  }\r\n\r\n  _getFilteredItems() {\r\n    return this.items.filter(item => item.isVisible);\r\n  }\r\n\r\n  _getConcealedItems() {\r\n    return this.items.filter(item => !item.isVisible);\r\n  }\r\n\r\n  /**\r\n   * Returns the column size, based on column width and sizer options.\r\n   * @param {number} containerWidth Size of the parent container.\r\n   * @param {number} gutterSize Size of the gutters.\r\n   * @return {number}\r\n   * @private\r\n   */\r\n  _getColumnSize(containerWidth, gutterSize) {\r\n    let size;\r\n\r\n    // If the columnWidth property is a function, then the grid is fluid\r\n    if (typeof this.options.columnWidth === 'function') {\r\n      size = this.options.columnWidth(containerWidth);\r\n\r\n    // columnWidth option isn't a function, are they using a sizing element?\r\n    } else if (this.options.sizer) {\r\n      size = Shuffle.getSize(this.options.sizer).width;\r\n\r\n    // if not, how about the explicitly set option?\r\n    } else if (this.options.columnWidth) {\r\n      size = this.options.columnWidth;\r\n\r\n    // or use the size of the first item\r\n    } else if (this.items.length > 0) {\r\n      size = Shuffle.getSize(this.items[0].element, true).width;\r\n\r\n    // if there's no items, use size of container\r\n    } else {\r\n      size = containerWidth;\r\n    }\r\n\r\n    // Don't let them set a column width of zero.\r\n    if (size === 0) {\r\n      size = containerWidth;\r\n    }\r\n\r\n    return size + gutterSize;\r\n  }\r\n\r\n  /**\r\n   * Returns the gutter size, based on gutter width and sizer options.\r\n   * @param {number} containerWidth Size of the parent container.\r\n   * @return {number}\r\n   * @private\r\n   */\r\n  _getGutterSize(containerWidth) {\r\n    let size;\r\n    if (typeof this.options.gutterWidth === 'function') {\r\n      size = this.options.gutterWidth(containerWidth);\r\n    } else if (this.options.sizer) {\r\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\r\n    } else {\r\n      size = this.options.gutterWidth;\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Calculate the number of columns to be used. Gets css if using sizer element.\r\n   * @param {number} [containerWidth] Optionally specify a container width if\r\n   *    it's already available.\r\n   */\r\n  _setColumns(containerWidth = Shuffle.getSize(this.element).width) {\r\n    const gutter = this._getGutterSize(containerWidth);\r\n    const columnWidth = this._getColumnSize(containerWidth, gutter);\r\n    let calculatedColumns = (containerWidth + gutter) / columnWidth;\r\n\r\n    // Widths given from getStyles are not precise enough...\r\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) <\r\n        this.options.columnThreshold) {\r\n      // e.g. calculatedColumns = 11.998876\r\n      calculatedColumns = Math.round(calculatedColumns);\r\n    }\r\n\r\n    this.cols = Math.max(Math.floor(calculatedColumns), 1);\r\n    this.containerWidth = containerWidth;\r\n    this.colWidth = columnWidth;\r\n  }\r\n\r\n  /**\r\n   * Adjust the height of the grid\r\n   */\r\n  _setContainerSize() {\r\n    this.element.style.height = this._getContainerSize() + 'px';\r\n  }\r\n\r\n  /**\r\n   * Based on the column heights, it returns the biggest one.\r\n   * @return {number}\r\n   * @private\r\n   */\r\n  _getContainerSize() {\r\n    return arrayMax(this.positions);\r\n  }\r\n\r\n  /**\r\n   * Get the clamped stagger amount.\r\n   * @param {number} index Index of the item to be staggered.\r\n   * @return {number}\r\n   */\r\n  _getStaggerAmount(index) {\r\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\r\n  }\r\n\r\n  /**\r\n   * Emit an event from this instance.\r\n   * @param {string} name Event name.\r\n   * @param {Object} [data={}] Optional object data.\r\n   */\r\n  _dispatch(name, data = {}) {\r\n    if (this.isDestroyed) {\r\n      return;\r\n    }\r\n\r\n    data.shuffle = this;\r\n    this.emit(name, data);\r\n  }\r\n\r\n  /**\r\n   * Zeros out the y columns array, which is used to determine item placement.\r\n   * @private\r\n   */\r\n  _resetCols() {\r\n    let i = this.cols;\r\n    this.positions = [];\r\n    while (i) {\r\n      i -= 1;\r\n      this.positions.push(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loops through each item that should be shown and calculates the x, y position.\r\n   * @param {ShuffleItem[]} items Array of items that will be shown/layed\r\n   *     out in order in their array.\r\n   */\r\n  _layout(items) {\r\n    const itemPositions = this._getNextPositions(items);\r\n\r\n    let count = 0;\r\n    items.forEach((item, i) => {\r\n      function callback() {\r\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\r\n      }\r\n\r\n      // If the item will not change its position, do not add it to the render\r\n      // queue. Transitions don't fire when setting a property to the same value.\r\n      if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\r\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\r\n        callback();\r\n        return;\r\n      }\r\n\r\n      item.point = itemPositions[i];\r\n      item.scale = ShuffleItem.Scale.VISIBLE;\r\n      item.isHidden = false;\r\n\r\n      // Clone the object so that the `before` object isn't modified when the\r\n      // transition delay is added.\r\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\r\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\r\n\r\n      this._queue.push({\r\n        item,\r\n        styles,\r\n        callback,\r\n      });\r\n\r\n      count += 1;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return an array of Point instances representing the future positions of\r\n   * each item.\r\n   * @param {ShuffleItem[]} items Array of sorted shuffle items.\r\n   * @return {Point[]}\r\n   * @private\r\n   */\r\n  _getNextPositions(items) {\r\n    // If position data is going to be changed, add the item's size to the\r\n    // transformer to allow for calculations.\r\n    if (this.options.isCentered) {\r\n      const itemsData = items.map((item, i) => {\r\n        const itemSize = Shuffle.getSize(item.element, true);\r\n        const point = this._getItemPosition(itemSize);\r\n        return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\r\n      });\r\n\r\n      return this.getTransformedPositions(itemsData, this.containerWidth);\r\n    }\r\n\r\n    // If no transforms are going to happen, simply return an array of the\r\n    // future points of each item.\r\n    return items.map(item => this._getItemPosition(Shuffle.getSize(item.element, true)));\r\n  }\r\n\r\n  /**\r\n   * Determine the location of the next item, based on its size.\r\n   * @param {{width: number, height: number}} itemSize Object with width and height.\r\n   * @return {Point}\r\n   * @private\r\n   */\r\n  _getItemPosition(itemSize) {\r\n    return getItemPosition({\r\n      itemSize,\r\n      positions: this.positions,\r\n      gridSize: this.colWidth,\r\n      total: this.cols,\r\n      threshold: this.options.columnThreshold,\r\n      buffer: this.options.buffer,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mutate positions before they're applied.\r\n   * @param {Rect[]} itemRects Item data objects.\r\n   * @param {number} containerWidth Width of the containing element.\r\n   * @return {Point[]}\r\n   * @protected\r\n   */\r\n  getTransformedPositions(itemRects, containerWidth) {\r\n    return getCenteredPositions(itemRects, containerWidth);\r\n  }\r\n\r\n  /**\r\n   * Hides the elements that don't match our filter.\r\n   * @param {ShuffleItem[]} collection Collection to shrink.\r\n   * @private\r\n   */\r\n  _shrink(collection = this._getConcealedItems()) {\r\n    let count = 0;\r\n    collection.forEach((item) => {\r\n      function callback() {\r\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\r\n      }\r\n\r\n      // Continuing would add a transitionend event listener to the element, but\r\n      // that listener would not execute because the transform and opacity would\r\n      // stay the same.\r\n      // The callback is executed here because it is not guaranteed to be called\r\n      // after the transitionend event because the transitionend could be\r\n      // canceled if another animation starts.\r\n      if (item.isHidden) {\r\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\r\n        callback();\r\n        return;\r\n      }\r\n\r\n      item.scale = ShuffleItem.Scale.HIDDEN;\r\n      item.isHidden = true;\r\n\r\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\r\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\r\n\r\n      this._queue.push({\r\n        item,\r\n        styles,\r\n        callback,\r\n      });\r\n\r\n      count += 1;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Resize handler.\r\n   * @private\r\n   */\r\n  _handleResize() {\r\n    // If shuffle is disabled, destroyed, don't do anything\r\n    if (!this.isEnabled || this.isDestroyed) {\r\n      return;\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  /**\r\n   * Returns styles which will be applied to the an item for a transition.\r\n   * @param {ShuffleItem} item Item to get styles for. Should have updated\r\n   *   scale and point properties.\r\n   * @param {Object} styleObject Extra styles that will be used in the transition.\r\n   * @return {!Object} Transforms for transitions, left/top for animate.\r\n   * @protected\r\n   */\r\n  getStylesForTransition(item, styleObject) {\r\n    // Clone the object to avoid mutating the original.\r\n    const styles = Object.assign({}, styleObject);\r\n\r\n    if (this.options.useTransforms) {\r\n      const x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\r\n      const y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\r\n      styles.transform = `translate(${x}px, ${y}px) scale(${item.scale})`;\r\n    } else {\r\n      styles.left = item.point.x + 'px';\r\n      styles.top = item.point.y + 'px';\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Listen for the transition end on an element and execute the itemCallback\r\n   * when it finishes.\r\n   * @param {Element} element Element to listen on.\r\n   * @param {function} itemCallback Callback for the item.\r\n   * @param {function} done Callback to notify `parallel` that this one is done.\r\n   */\r\n  _whenTransitionDone(element, itemCallback, done) {\r\n    const id = onTransitionEnd(element, (evt) => {\r\n      itemCallback();\r\n      done(null, evt);\r\n    });\r\n\r\n    this._transitions.push(id);\r\n  }\r\n\r\n  /**\r\n   * Return a function which will set CSS styles and call the `done` function\r\n   * when (if) the transition finishes.\r\n   * @param {Object} opts Transition object.\r\n   * @return {function} A function to be called with a `done` function.\r\n   */\r\n  _getTransitionFunction(opts) {\r\n    return (done) => {\r\n      opts.item.applyCss(opts.styles);\r\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute the styles gathered in the style queue. This applies styles to elements,\r\n   * triggering transitions.\r\n   * @private\r\n   */\r\n  _processQueue() {\r\n    if (this.isTransitioning) {\r\n      this._cancelMovement();\r\n    }\r\n\r\n    const hasSpeed = this.options.speed > 0;\r\n    const hasQueue = this._queue.length > 0;\r\n\r\n    if (hasQueue && hasSpeed && this.isInitialized) {\r\n      this._startTransitions(this._queue);\r\n    } else if (hasQueue) {\r\n      this._styleImmediately(this._queue);\r\n      this._dispatch(Shuffle.EventType.LAYOUT);\r\n\r\n    // A call to layout happened, but none of the newly visible items will\r\n    // change position or the transition duration is zero, which will not trigger\r\n    // the transitionend event.\r\n    } else {\r\n      this._dispatch(Shuffle.EventType.LAYOUT);\r\n    }\r\n\r\n    // Remove everything in the style queue\r\n    this._queue.length = 0;\r\n  }\r\n\r\n  /**\r\n   * Wait for each transition to finish, the emit the layout event.\r\n   * @param {Object[]} transitions Array of transition objects.\r\n   */\r\n  _startTransitions(transitions) {\r\n    // Set flag that shuffle is currently in motion.\r\n    this.isTransitioning = true;\r\n\r\n    // Create an array of functions to be called.\r\n    const callbacks = transitions.map(obj => this._getTransitionFunction(obj));\r\n\r\n    parallel(callbacks, this._movementFinished.bind(this));\r\n  }\r\n\r\n  _cancelMovement() {\r\n    // Remove the transition end event for each listener.\r\n    this._transitions.forEach(cancelTransitionEnd);\r\n\r\n    // Reset the array.\r\n    this._transitions.length = 0;\r\n\r\n    // Show it's no longer active.\r\n    this.isTransitioning = false;\r\n  }\r\n\r\n  /**\r\n   * Apply styles without a transition.\r\n   * @param {Object[]} objects Array of transition objects.\r\n   * @private\r\n   */\r\n  _styleImmediately(objects) {\r\n    if (objects.length) {\r\n      const elements = objects.map(obj => obj.item.element);\r\n\r\n      Shuffle._skipTransitions(elements, () => {\r\n        objects.forEach((obj) => {\r\n          obj.item.applyCss(obj.styles);\r\n          obj.callback();\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  _movementFinished() {\r\n    this._transitions.length = 0;\r\n    this.isTransitioning = false;\r\n    this._dispatch(Shuffle.EventType.LAYOUT);\r\n  }\r\n\r\n  /**\r\n   * The magic. This is what makes the plugin 'shuffle'\r\n   * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\r\n   *     Can be a function, string, or array of strings.\r\n   * @param {Object} [sortObj] A sort object which can sort the visible set\r\n   */\r\n  filter(category, sortObj) {\r\n    if (!this.isEnabled) {\r\n      return;\r\n    }\r\n\r\n    if (!category || (category && category.length === 0)) {\r\n      category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\r\n    }\r\n\r\n    this._filter(category);\r\n\r\n    // Shrink each hidden item\r\n    this._shrink();\r\n\r\n    // How many visible elements?\r\n    this._updateItemCount();\r\n\r\n    // Update transforms on visible elements so they will animate to their new positions.\r\n    this.sort(sortObj);\r\n  }\r\n\r\n  /**\r\n   * Gets the visible elements, sorts them, and passes them to layout.\r\n   * @param {Object} [sortOptions] The options object to pass to `sorter`.\r\n   */\r\n  sort(sortOptions = this.lastSort) {\r\n    if (!this.isEnabled) {\r\n      return;\r\n    }\r\n\r\n    this._resetCols();\r\n\r\n    const items = sorter(this._getFilteredItems(), sortOptions);\r\n\r\n    this._layout(items);\r\n\r\n    // `_layout` always happens after `_shrink`, so it's safe to process the style\r\n    // queue here with styles from the shrink method.\r\n    this._processQueue();\r\n\r\n    // Adjust the height of the container.\r\n    this._setContainerSize();\r\n\r\n    this.lastSort = sortOptions;\r\n  }\r\n\r\n  /**\r\n   * Reposition everything.\r\n   * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\r\n   */\r\n  update(isOnlyLayout = false) {\r\n    if (this.isEnabled) {\r\n      if (!isOnlyLayout) {\r\n        // Get updated colCount\r\n        this._setColumns();\r\n      }\r\n\r\n      // Layout items\r\n      this.sort();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use this instead of `update()` if you don't need the columns and gutters updated\r\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\r\n   * could be off.\r\n   */\r\n  layout() {\r\n    this.update(true);\r\n  }\r\n\r\n  /**\r\n   * New items have been appended to shuffle. Mix them in with the current\r\n   * filter or sort status.\r\n   * @param {Element[]} newItems Collection of new items.\r\n   */\r\n  add(newItems) {\r\n    const items = arrayUnique(newItems).map(el => new ShuffleItem(el));\r\n\r\n    // Add classes and set initial positions.\r\n    this._initItems(items);\r\n\r\n    // Determine which items will go with the current filter.\r\n    this._resetCols();\r\n    const newItemSet = this._filter(this.lastFilter, items);\r\n    const willBeVisible = this._mergeNewItems(newItemSet.visible);\r\n    const sortedVisibleItems = sorter(willBeVisible, this.lastSort);\r\n\r\n    // Layout all items again so that new items get positions.\r\n    // Synchonously apply positions.\r\n    const itemPositions = this._getNextPositions(sortedVisibleItems);\r\n    sortedVisibleItems.forEach((item, i) => {\r\n      if (newItemSet.visible.includes(item)) {\r\n        item.point = itemPositions[i];\r\n        item.scale = ShuffleItem.Scale.HIDDEN;\r\n        item.isHidden = true;\r\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\r\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\r\n        item.applyCss(this.getStylesForTransition(item, {}));\r\n      }\r\n    });\r\n\r\n    // Cause layout so that the styles above are applied.\r\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\r\n\r\n    // Add transition to each item.\r\n    this.setItemTransitions(items);\r\n\r\n    // Update the list of items.\r\n    this.items = this._mergeNewItems(items);\r\n\r\n    // Update layout/visibility of new and old items.\r\n    this.filter(this.lastFilter);\r\n  }\r\n\r\n  /**\r\n   * Disables shuffle from updating dimensions and layout on resize\r\n   */\r\n  disable() {\r\n    this.isEnabled = false;\r\n  }\r\n\r\n  /**\r\n   * Enables shuffle again\r\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\r\n   */\r\n  enable(isUpdateLayout = true) {\r\n    this.isEnabled = true;\r\n    if (isUpdateLayout) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove 1 or more shuffle items.\r\n   * @param {Element[]} elements An array containing one or more\r\n   *     elements in shuffle\r\n   * @return {Shuffle} The shuffle instance.\r\n   */\r\n  remove(elements) {\r\n    if (!elements.length) {\r\n      return;\r\n    }\r\n\r\n    const collection = arrayUnique(elements);\r\n\r\n    const oldItems = collection\r\n      .map(element => this.getItemByElement(element))\r\n      .filter(item => !!item);\r\n\r\n    const handleLayout = () => {\r\n      this._disposeItems(oldItems);\r\n\r\n      // Remove the collection in the callback\r\n      collection.forEach((element) => {\r\n        element.parentNode.removeChild(element);\r\n      });\r\n\r\n      this._dispatch(Shuffle.EventType.REMOVED, { collection });\r\n    };\r\n\r\n    // Hide collection first.\r\n    this._toggleFilterClasses({\r\n      visible: [],\r\n      hidden: oldItems,\r\n    });\r\n\r\n    this._shrink(oldItems);\r\n\r\n    this.sort();\r\n\r\n    // Update the list of items here because `remove` could be called again\r\n    // with an item that is in the process of being removed.\r\n    this.items = this.items.filter(item => !oldItems.includes(item));\r\n    this._updateItemCount();\r\n\r\n    this.once(Shuffle.EventType.LAYOUT, handleLayout);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a shuffle item by its element.\r\n   * @param {Element} element Element to look for.\r\n   * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\r\n   */\r\n  getItemByElement(element) {\r\n    return this.items.find(item => item.element === element);\r\n  }\r\n\r\n  /**\r\n   * Dump the elements currently stored and reinitialize all child elements which\r\n   * match the `itemSelector`.\r\n   */\r\n  resetItems() {\r\n    // Remove refs to current items.\r\n    this._disposeItems(this.items);\r\n    this.isInitialized = false;\r\n\r\n    // Find new items in the DOM.\r\n    this.items = this._getItems();\r\n\r\n    // Set initial styles on the new items.\r\n    this._initItems(this.items);\r\n\r\n    this.once(Shuffle.EventType.LAYOUT, () => {\r\n      // Add transition to each item.\r\n      this.setItemTransitions(this.items);\r\n      this.isInitialized = true;\r\n    });\r\n\r\n    // Lay out all items.\r\n    this.filter(this.lastFilter);\r\n  }\r\n\r\n  /**\r\n   * Destroys shuffle, removes events, styles, and classes\r\n   */\r\n  destroy() {\r\n    this._cancelMovement();\r\n    window.removeEventListener('resize', this._onResize);\r\n\r\n    // Reset container styles\r\n    this.element.classList.remove('shuffle');\r\n    this.element.removeAttribute('style');\r\n\r\n    // Reset individual item styles\r\n    this._disposeItems(this.items);\r\n\r\n    this.items.length = 0;\r\n    this._transitions.length = 0;\r\n\r\n    // Null DOM references\r\n    this.options.sizer = null;\r\n    this.element = null;\r\n\r\n    // Set a flag so if a debounced resize has been triggered,\r\n    // it can first check if it is actually isDestroyed and not doing anything\r\n    this.isDestroyed = true;\r\n    this.isEnabled = false;\r\n  }\r\n\r\n  /**\r\n   * Returns the outer width of an element, optionally including its margins.\r\n   *\r\n   * There are a few different methods for getting the width of an element, none of\r\n   * which work perfectly for all Shuffle's use cases.\r\n   *\r\n   * 1. getBoundingClientRect() `left` and `right` properties.\r\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\r\n   *   elements which have shrunk.\r\n   * 2. The `offsetWidth` property.\r\n   *   - This value stays the same regardless of the elements transform property,\r\n   *   however, it does not return subpixel values.\r\n   * 3. getComputedStyle()\r\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\r\n   *   padding and border when box-sizing: border-box is set, requiring a feature\r\n   *   test and extra work to add the padding back for IE and other browsers which\r\n   *   follow the W3C spec here.\r\n   *\r\n   * @param {Element} element The element.\r\n   * @param {boolean} [includeMargins=false] Whether to include margins.\r\n   * @return {{width: number, height: number}} The width and height.\r\n   */\r\n  static getSize(element, includeMargins = false) {\r\n    // Store the styles so that they can be used by others without asking for it again.\r\n    const styles = window.getComputedStyle(element, null);\r\n    let width = getNumberStyle(element, 'width', styles);\r\n    let height = getNumberStyle(element, 'height', styles);\r\n\r\n    if (includeMargins) {\r\n      const marginLeft = getNumberStyle(element, 'marginLeft', styles);\r\n      const marginRight = getNumberStyle(element, 'marginRight', styles);\r\n      const marginTop = getNumberStyle(element, 'marginTop', styles);\r\n      const marginBottom = getNumberStyle(element, 'marginBottom', styles);\r\n      width += marginLeft + marginRight;\r\n      height += marginTop + marginBottom;\r\n    }\r\n\r\n    return {\r\n      width,\r\n      height,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Change a property or execute a function which will not have a transition\r\n   * @param {Element[]} elements DOM elements that won't be transitioned.\r\n   * @param {function} callback A function which will be called while transition\r\n   *     is set to 0ms.\r\n   * @private\r\n   */\r\n  static _skipTransitions(elements, callback) {\r\n    const zero = '0ms';\r\n\r\n    // Save current duration and delay.\r\n    const data = elements.map((element) => {\r\n      const { style } = element;\r\n      const duration = style.transitionDuration;\r\n      const delay = style.transitionDelay;\r\n\r\n      // Set the duration to zero so it happens immediately\r\n      style.transitionDuration = zero;\r\n      style.transitionDelay = zero;\r\n\r\n      return {\r\n        duration,\r\n        delay,\r\n      };\r\n    });\r\n\r\n    callback();\r\n\r\n    // Cause forced synchronous layout.\r\n    elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\r\n\r\n    // Put the duration back\r\n    elements.forEach((element, i) => {\r\n      element.style.transitionDuration = data[i].duration;\r\n      element.style.transitionDelay = data[i].delay;\r\n    });\r\n  }\r\n}\r\n\r\nShuffle.ShuffleItem = ShuffleItem;\r\n\r\nShuffle.ALL_ITEMS = 'all';\r\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\r\n\r\n/** @enum {string} */\r\nShuffle.EventType = {\r\n  LAYOUT: 'shuffle:layout',\r\n  REMOVED: 'shuffle:removed',\r\n};\r\n\r\n/** @enum {string} */\r\nShuffle.Classes = Classes;\r\n\r\n/** @enum {string} */\r\nShuffle.FilterMode = {\r\n  ANY: 'any',\r\n  ALL: 'all',\r\n};\r\n\r\n// Overrideable options\r\nShuffle.options = {\r\n  // Initial filter group.\r\n  group: Shuffle.ALL_ITEMS,\r\n\r\n  // Transition/animation speed (milliseconds).\r\n  speed: 250,\r\n\r\n  // CSS easing function to use.\r\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\r\n\r\n  // e.g. '.picture-item'.\r\n  itemSelector: '*',\r\n\r\n  // Element or selector string. Use an element to determine the size of columns\r\n  // and gutters.\r\n  sizer: null,\r\n\r\n  // A static number or function that tells the plugin how wide the gutters\r\n  // between columns are (in pixels).\r\n  gutterWidth: 0,\r\n\r\n  // A static number or function that returns a number which tells the plugin\r\n  // how wide the columns are (in pixels).\r\n  columnWidth: 0,\r\n\r\n  // If your group is not json, and is comma delimeted, you could set delimeter\r\n  // to ','.\r\n  delimeter: null,\r\n\r\n  // Useful for percentage based heights when they might not always be exactly\r\n  // the same (in pixels).\r\n  buffer: 0,\r\n\r\n  // Reading the width of elements isn't precise enough and can cause columns to\r\n  // jump between values.\r\n  columnThreshold: 0.01,\r\n\r\n  // Shuffle can be isInitialized with a sort object. It is the same object\r\n  // given to the sort method.\r\n  initialSort: null,\r\n\r\n  // By default, shuffle will throttle resize events. This can be changed or\r\n  // removed.\r\n  throttle,\r\n\r\n  // How often shuffle can be called on resize (in milliseconds).\r\n  throttleTime: 300,\r\n\r\n  // Transition delay offset for each item in milliseconds.\r\n  staggerAmount: 15,\r\n\r\n  // Maximum stagger delay in milliseconds.\r\n  staggerAmountMax: 150,\r\n\r\n  // Whether to use transforms or absolute positioning.\r\n  useTransforms: true,\r\n\r\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\r\n  // the element passes the test if any of its groups are in the array. With \"all\",\r\n  // the element only passes if all groups are in the array.\r\n  filterMode: Shuffle.FilterMode.ANY,\r\n\r\n  // Attempt to center grid items in each row.\r\n  isCentered: false,\r\n\r\n  // Whether to round pixel values used in translate(x, y). This usually avoids\r\n  // blurriness.\r\n  roundTransforms: true,\r\n};\r\n\r\nShuffle.Point = Point;\r\nShuffle.Rect = Rect;\r\n\r\n// Expose for testing. Hack at your own risk.\r\nShuffle.__sorter = sorter;\r\nShuffle.__getColumnSpan = getColumnSpan;\r\nShuffle.__getAvailablePositions = getAvailablePositions;\r\nShuffle.__getShortColumn = getShortColumn;\r\nShuffle.__getCenteredPositions = getCenteredPositions;\r\n\r\nexport default Shuffle;\r\n","/**\r\n * Hyphenates a javascript style string to a css one. For example:\r\n * MozBoxSizing -> -moz-box-sizing.\r\n * @param {string} str The string to hyphenate.\r\n * @return {string} The hyphenated string.\r\n */\r\nexport default function hyphenate(str) {\r\n  return str.replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`);\r\n}\r\n"],"names":["E","prototype","on","name","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","call","evtArr","i","len","length","evts","liveEvents","proto","Element","vendor","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","el","selector","nodeType","nodes","parentNode","querySelectorAll","func","wait","args","rtn","timeoutID","last","delta","Date","setTimeout","noop","getNumber","value","parseFloat","Point","x","y","a","b","Rect","w","h","id","left","top","width","height","ShuffleItem","element","isVisible","isHidden","classList","remove","Classes","HIDDEN","add","VISIBLE","removeAttribute","setAttribute","addClasses","SHUFFLE_ITEM","applyCss","Css","INITIAL","scale","Scale","point","classes","forEach","className","obj","keys","key","style","removeClasses","ret","document","body","documentElement","createElement","cssText","appendChild","window","getComputedStyle","removeChild","computedSize","getNumberStyle","styles","COMPUTED_SIZE_INCLUDES_PADDING","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","defaults","sorter","arr","options","opts","Object","assign","original","Array","from","revert","randomize","array","n","Math","floor","random","temp","by","sort","valA","valB","undefined","reverse","transitions","eventName","count","cancelTransitionEnd","removeEventListener","onTransitionEnd","evt","currentTarget","target","addEventListener","arrayMax","max","getColumnSpan","itemWidth","columnWidth","columns","threshold","columnSpan","abs","round","min","ceil","getAvailablePositions","positions","available","getShortColumn","buffer","minPosition","getCenteredPositions","itemRects","containerWidth","rowMap","itemRect","rects","rows","centeredRows","lastItem","end","offset","finalRects","canMove","newRects","every","r","newRect","noOverlap","some","intersects","intersectingRect","rowIndex","findIndex","items","includes","splice","concat","map","arrayUnique","Set","Shuffle","lastSort","group","ALL_ITEMS","lastFilter","isEnabled","isDestroyed","isInitialized","_transitions","isTransitioning","_queue","_this","_getElementOption","TypeError","_init","TinyEmitter","_getItems","sizer","BASE","_initItems","_onResize","_getResizeFunction","readyState","layout","bind","onLoad","containerCss","getSize","_validateStyles","_setColumns","filter","initialSort","offsetWidth","setItemTransitions","transition","speed","easing","resizeFunction","_handleResize","throttle","throttleTime","option","querySelector","jquery","position","overflow","category","collection","set","_getFilteredSets","_toggleFilterClasses","visible","hidden","item","_this2","_doesPassFilter","attr","getAttribute","FILTER_ATTRIBUTE_KEY","delimeter","split","JSON","parse","testCategory","isArray","filterMode","FilterMode","ANY","show","hide","init","dispose","visibleItems","_getFilteredItems","positionProps","useTransforms","cssProps","before","k","replace","str","m1","toLowerCase","properties","join","transitionDuration","transitionTimingFunction","transitionProperty","children","_this3","itemSelector","indexOf","gutterSize","size","gutterWidth","gutter","_getGutterSize","_getColumnSize","calculatedColumns","columnThreshold","cols","colWidth","_getContainerSize","index","staggerAmount","staggerAmountMax","shuffle","itemPositions","_getNextPositions","after","equals","_this4","getStylesForTransition","transitionDelay","_getStaggerAmount","isCentered","itemsData","itemSize","_this5","_getItemPosition","getTransformedPositions","gridSize","total","span","setY","shortColumnIndex","setHeight","getItemPosition","_getConcealedItems","_this6","update","styleObject","roundTransforms","transform","itemCallback","done","_whenTransitionDone","_cancelMovement","hasSpeed","hasQueue","_startTransitions","_styleImmediately","_dispatch","EventType","LAYOUT","fns","context","pending","finished","results","maybeDone","err","result","_this8","_getTransitionFunction","_movementFinished","objects","elements","_skipTransitions","sortObj","_filter","_shrink","_updateItemCount","sortOptions","_resetCols","_layout","_processQueue","_setContainerSize","isOnlyLayout","newItems","newItemSet","sortedVisibleItems","_mergeNewItems","_this9","isUpdateLayout","oldItems","_this10","getItemByElement","_disposeItems","REMOVED","find","_this11","includeMargins","duration","delay","__sorter","__getColumnSpan","__getAvailablePositions","__getShortColumn","__getCenteredPositions"],"mappings":"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"}
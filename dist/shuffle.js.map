{"version":3,"file":"shuffle.js","sources":["../node_modules/tiny-emitter/index.js","../node_modules/matches-selector/index.js","../node_modules/throttleit/index.js","../node_modules/array-parallel/index.js","../src/get-number.js","../src/point.js","../src/rect.js","../src/classes.js","../src/shuffle-item.js","../src/computed-size.js","../src/get-number-style.js","../src/sorter.js","../src/on-transition-end.js","../src/array-max.js","../src/array-min.js","../src/layout.js","../src/hyphenate.js","../src/shuffle.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\n","'use strict';\n\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nmodule.exports = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n","module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","module.exports = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context\n      context = null\n    } else {\n      callback = noop\n    }\n  }\n\n  var pending = fns && fns.length\n  if (!pending) return callback(null, []);\n\n  var finished = false\n  var results = new Array(pending)\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i))\n  } : function (fn, i) {\n    fn(maybeDone(i))\n  })\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results)\n        finished = true\n        return\n      }\n\n      results[i] = result\n\n      if (!--pending) callback(null, results);\n    }\n  }\n}\n\nfunction noop() {}\n","/**\r\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\r\n * @param {*} value Possibly numeric value.\r\n * @return {number} `value` or zero if `value` isn't numeric.\r\n */\r\nexport default function getNumber(value) {\r\n  return parseFloat(value) || 0;\r\n}\r\n","import getNumber from './get-number';\r\n\r\nclass Point {\r\n  /**\r\n   * Represents a coordinate pair.\r\n   * @param {number} [x=0] X.\r\n   * @param {number} [y=0] Y.\r\n   */\r\n  constructor(x, y) {\r\n    this.x = getNumber(x);\r\n    this.y = getNumber(y);\r\n  }\r\n\r\n  /**\r\n   * Whether two points are equal.\r\n   * @param {Point} a Point A.\r\n   * @param {Point} b Point B.\r\n   * @return {boolean}\r\n   */\r\n  static equals(a, b) {\r\n    return a.x === b.x && a.y === b.y;\r\n  }\r\n}\r\n\r\nexport default Point;\r\n","export default class Rect {\r\n  /**\r\n   * Class for representing rectangular regions.\r\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\r\n   * @param {number} x Left.\r\n   * @param {number} y Top.\r\n   * @param {number} w Width.\r\n   * @param {number} h Height.\r\n   * @param {number} id Identifier\r\n   * @constructor\r\n   */\r\n  constructor(x, y, w, h, id) {\r\n    this.id = id;\r\n\r\n    /** @type {number} */\r\n    this.left = x;\r\n\r\n    /** @type {number} */\r\n    this.top = y;\r\n\r\n    /** @type {number} */\r\n    this.width = w;\r\n\r\n    /** @type {number} */\r\n    this.height = h;\r\n  }\r\n\r\n  /**\r\n   * Returns whether two rectangles intersect.\r\n   * @param {Rect} a A Rectangle.\r\n   * @param {Rect} b A Rectangle.\r\n   * @return {boolean} Whether a and b intersect.\r\n   */\r\n  static intersects(a, b) {\r\n    return (\r\n      a.left < b.left + b.width && b.left < a.left + a.width &&\r\n      a.top < b.top + b.height && b.top < a.top + a.height);\r\n  }\r\n}\r\n","export default {\r\n  BASE: 'shuffle',\r\n  SHUFFLE_ITEM: 'shuffle-item',\r\n  VISIBLE: 'shuffle-item--visible',\r\n  HIDDEN: 'shuffle-item--hidden',\r\n};\r\n","import Point from './point';\r\nimport Classes from './classes';\r\n\r\nlet id = 0;\r\n\r\nclass ShuffleItem {\r\n  constructor(element) {\r\n    id += 1;\r\n    this.id = id;\r\n    this.element = element;\r\n\r\n    /**\r\n     * Used to separate items for layout and shrink.\r\n     */\r\n    this.isVisible = true;\r\n\r\n    /**\r\n     * Used to determine if a transition will happen. By the time the _layout\r\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\r\n     * has already been changed by the separation methods, so this property is\r\n     * needed to know if the item was visible/hidden before the shrink/layout.\r\n     */\r\n    this.isHidden = false;\r\n  }\r\n\r\n  show() {\r\n    this.isVisible = true;\r\n    this.element.classList.remove(Classes.HIDDEN);\r\n    this.element.classList.add(Classes.VISIBLE);\r\n    this.element.removeAttribute('aria-hidden');\r\n  }\r\n\r\n  hide() {\r\n    this.isVisible = false;\r\n    this.element.classList.remove(Classes.VISIBLE);\r\n    this.element.classList.add(Classes.HIDDEN);\r\n    this.element.setAttribute('aria-hidden', true);\r\n  }\r\n\r\n  init() {\r\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\r\n    this.applyCss(ShuffleItem.Css.INITIAL);\r\n    this.scale = ShuffleItem.Scale.VISIBLE;\r\n    this.point = new Point();\r\n  }\r\n\r\n  addClasses(classes) {\r\n    classes.forEach((className) => {\r\n      this.element.classList.add(className);\r\n    });\r\n  }\r\n\r\n  removeClasses(classes) {\r\n    classes.forEach((className) => {\r\n      this.element.classList.remove(className);\r\n    });\r\n  }\r\n\r\n  applyCss(obj) {\r\n    Object.keys(obj).forEach((key) => {\r\n      this.element.style[key] = obj[key];\r\n    });\r\n  }\r\n\r\n  dispose() {\r\n    this.removeClasses([\r\n      Classes.HIDDEN,\r\n      Classes.VISIBLE,\r\n      Classes.SHUFFLE_ITEM,\r\n    ]);\r\n\r\n    this.element.removeAttribute('style');\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nShuffleItem.Css = {\r\n  INITIAL: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    visibility: 'visible',\r\n    'will-change': 'transform',\r\n  },\r\n  VISIBLE: {\r\n    before: {\r\n      opacity: 1,\r\n      visibility: 'visible',\r\n    },\r\n    after: {\r\n      transitionDelay: '',\r\n    },\r\n  },\r\n  HIDDEN: {\r\n    before: {\r\n      opacity: 0,\r\n    },\r\n    after: {\r\n      visibility: 'hidden',\r\n      transitionDelay: '',\r\n    },\r\n  },\r\n};\r\n\r\nShuffleItem.Scale = {\r\n  VISIBLE: 1,\r\n  HIDDEN: 0.001,\r\n};\r\n\r\nexport default ShuffleItem;\r\n","const computedSize = () => {\r\n    if ( typeof document !== 'undefined' ) {\r\n        const element = document.body || document.documentElement;\r\n        const e = document.createElement('div');\r\n        e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\r\n        element.appendChild(e);\r\n        const { width } = window.getComputedStyle(e, null);\r\n        element.removeChild(e);\r\n        return width === '10px';\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nconst ret = computedSize()\r\n\r\nexport default ret;\r\n","import getNumber from './get-number';\r\nimport COMPUTED_SIZE_INCLUDES_PADDING from './computed-size';\r\n\r\n/**\r\n * Retrieve the computed style for an element, parsed as a float.\r\n * @param {Element} element Element to get style for.\r\n * @param {string} style Style property.\r\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\r\n *     use instead of asking for them again.\r\n * @return {number} The parsed computed value or zero if that fails because IE\r\n *     will return 'auto' when the element doesn't have margins instead of\r\n *     the computed style.\r\n */\r\nexport default function getNumberStyle(\r\n  element, style,\r\n  styles = window.getComputedStyle(element, null),\r\n) {\r\n  let value = getNumber(styles[style]);\r\n\r\n  // Support IE<=11 and W3C spec.\r\n  if (!COMPUTED_SIZE_INCLUDES_PADDING && style === 'width') {\r\n    value += getNumber(styles.paddingLeft) +\r\n      getNumber(styles.paddingRight) +\r\n      getNumber(styles.borderLeftWidth) +\r\n      getNumber(styles.borderRightWidth);\r\n  } else if (!COMPUTED_SIZE_INCLUDES_PADDING && style === 'height') {\r\n    value += getNumber(styles.paddingTop) +\r\n      getNumber(styles.paddingBottom) +\r\n      getNumber(styles.borderTopWidth) +\r\n      getNumber(styles.borderBottomWidth);\r\n  }\r\n\r\n  return value;\r\n}\r\n","/**\r\n * Fisher-Yates shuffle.\r\n * http://stackoverflow.com/a/962890/373422\r\n * https://bost.ocks.org/mike/shuffle/\r\n * @param {Array} array Array to shuffle.\r\n * @return {Array} Randomly sorted array.\r\n */\r\nfunction randomize(array) {\r\n  let n = array.length;\r\n\r\n  while (n) {\r\n    n -= 1;\r\n    const i = Math.floor(Math.random() * (n + 1));\r\n    const temp = array[i];\r\n    array[i] = array[n];\r\n    array[n] = temp;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nconst defaults = {\r\n  // Use array.reverse() to reverse the results\r\n  reverse: false,\r\n\r\n  // Sorting function\r\n  by: null,\r\n\r\n  // If true, this will skip the sorting and return a randomized order in the array\r\n  randomize: false,\r\n\r\n  // Determines which property of each item in the array is passed to the\r\n  // sorting method.\r\n  key: 'element',\r\n};\r\n\r\n// You can return `undefined` from the `by` function to revert to DOM order.\r\nexport default function sorter(arr, options) {\r\n  const opts = Object.assign({}, defaults, options);\r\n  const original = Array.from(arr);\r\n  let revert = false;\r\n\r\n  if (!arr.length) {\r\n    return [];\r\n  }\r\n\r\n  if (opts.randomize) {\r\n    return randomize(arr);\r\n  }\r\n\r\n  // Sort the elements by the opts.by function.\r\n  // If we don't have opts.by, default to DOM order\r\n  if (typeof opts.by === 'function') {\r\n    arr.sort((a, b) => {\r\n      // Exit early if we already know we want to revert\r\n      if (revert) {\r\n        return 0;\r\n      }\r\n\r\n      const valA = opts.by(a[opts.key]);\r\n      const valB = opts.by(b[opts.key]);\r\n\r\n      // If both values are undefined, use the DOM order\r\n      if (valA === undefined && valB === undefined) {\r\n        revert = true;\r\n        return 0;\r\n      }\r\n\r\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\r\n        return -1;\r\n      }\r\n\r\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\r\n        return 1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  // Revert to the original array if necessary\r\n  if (revert) {\r\n    return original;\r\n  }\r\n\r\n  if (opts.reverse) {\r\n    arr.reverse();\r\n  }\r\n\r\n  return arr;\r\n}\r\n","const transitions = {};\r\nconst eventName = 'transitionend';\r\nlet count = 0;\r\n\r\nfunction uniqueId() {\r\n  count += 1;\r\n  return eventName + count;\r\n}\r\n\r\nexport function cancelTransitionEnd(id) {\r\n  if (transitions[id]) {\r\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\r\n    transitions[id] = null;\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function onTransitionEnd(element, callback) {\r\n  const id = uniqueId();\r\n  const listener = (evt) => {\r\n    if (evt.currentTarget === evt.target) {\r\n      cancelTransitionEnd(id);\r\n      callback(evt);\r\n    }\r\n  };\r\n\r\n  element.addEventListener(eventName, listener);\r\n\r\n  transitions[id] = { element, listener };\r\n\r\n  return id;\r\n}\r\n","export default function arrayMax(array) {\r\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\r\n}\r\n","export default function arrayMin(array) {\r\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\r\n}\r\n","import Point from './point';\r\nimport Rect from './rect';\r\nimport arrayMax from './array-max';\r\nimport arrayMin from './array-min';\r\n\r\n/**\r\n * Determine the number of columns an items spans.\r\n * @param {number} itemWidth Width of the item.\r\n * @param {number} columnWidth Width of the column (includes gutter).\r\n * @param {number} columns Total number of columns\r\n * @param {number} threshold A buffer value for the size of the column to fit.\r\n * @return {number}\r\n */\r\nexport function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\r\n  let columnSpan = itemWidth / columnWidth;\r\n\r\n  // If the difference between the rounded column span number and the\r\n  // calculated column span number is really small, round the number to\r\n  // make it fit.\r\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\r\n    // e.g. columnSpan = 4.0089945390298745\r\n    columnSpan = Math.round(columnSpan);\r\n  }\r\n\r\n  // Ensure the column span is not more than the amount of columns in the whole layout.\r\n  return Math.min(Math.ceil(columnSpan), columns);\r\n}\r\n\r\n/**\r\n * Retrieves the column set to use for placement.\r\n * @param {number} columnSpan The number of columns this current item spans.\r\n * @param {number} columns The total columns in the grid.\r\n * @return {Array.<number>} An array of numbers represeting the column set.\r\n */\r\nexport function getAvailablePositions(positions, columnSpan, columns) {\r\n  // The item spans only one column.\r\n  if (columnSpan === 1) {\r\n    return positions;\r\n  }\r\n\r\n  // The item spans more than one column, figure out how many different\r\n  // places it could fit horizontally.\r\n  // The group count is the number of places within the positions this block\r\n  // could fit, ignoring the current positions of items.\r\n  // Imagine a 2 column brick as the second item in a 4 column grid with\r\n  // 10px height each. Find the places it would fit:\r\n  // [20, 10, 10, 0]\r\n  //  |   |   |\r\n  //  *   *   *\r\n  //\r\n  // Then take the places which fit and get the bigger of the two:\r\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\r\n  //\r\n  // Next, find the first smallest number (the short column).\r\n  // [20, 10, 10]\r\n  //      |\r\n  //      *\r\n  //\r\n  // And that's where it should be placed!\r\n  //\r\n  // Another example where the second column's item extends past the first:\r\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\r\n  const available = [];\r\n\r\n  // For how many possible positions for this item there are.\r\n  for (let i = 0; i <= columns - columnSpan; i++) {\r\n    // Find the bigger value for each place it could fit.\r\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\r\n  }\r\n\r\n  return available;\r\n}\r\n\r\n/**\r\n * Find index of short column, the first from the left where this item will go.\r\n *\r\n * @param {Array.<number>} positions The array to search for the smallest number.\r\n * @param {number} buffer Optional buffer which is very useful when the height\r\n *     is a percentage of the width.\r\n * @return {number} Index of the short column.\r\n */\r\nexport function getShortColumn(positions, buffer) {\r\n  const minPosition = arrayMin(positions);\r\n  for (let i = 0, len = positions.length; i < len; i++) {\r\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Determine the location of the next item, based on its size.\r\n * @param {Object} itemSize Object with width and height.\r\n * @param {Array.<number>} positions Positions of the other current items.\r\n * @param {number} gridSize The column width or row height.\r\n * @param {number} total The total number of columns or rows.\r\n * @param {number} threshold Buffer value for the column to fit.\r\n * @param {number} buffer Vertical buffer for the height of items.\r\n * @return {Point}\r\n */\r\nexport function getItemPosition({\r\n  itemSize, positions, gridSize, total, threshold, buffer,\r\n}) {\r\n  const span = getColumnSpan(itemSize.width, gridSize, total, threshold);\r\n  const setY = getAvailablePositions(positions, span, total);\r\n  const shortColumnIndex = getShortColumn(setY, buffer);\r\n\r\n  // Position the item\r\n  const point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]);\r\n\r\n  // Update the columns array with the new values for each column.\r\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\r\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\r\n  const setHeight = setY[shortColumnIndex] + itemSize.height;\r\n  for (let i = 0; i < span; i++) {\r\n    positions[shortColumnIndex + i] = setHeight;\r\n  }\r\n\r\n  return point;\r\n}\r\n\r\n/**\r\n * This method attempts to center items. This method could potentially be slow\r\n * with a large number of items because it must place items, then check every\r\n * previous item to ensure there is no overlap.\r\n * @param {Array.<Rect>} itemRects Item data objects.\r\n * @param {number} containerWidth Width of the containing element.\r\n * @return {Array.<Point>}\r\n */\r\nexport function getCenteredPositions(itemRects, containerWidth) {\r\n  const rowMap = {};\r\n\r\n  // Populate rows by their offset because items could jump between rows like:\r\n  // a   c\r\n  //  bbb\r\n  itemRects.forEach((itemRect) => {\r\n    if (rowMap[itemRect.top]) {\r\n      // Push the point to the last row array.\r\n      rowMap[itemRect.top].push(itemRect);\r\n    } else {\r\n      // Start of a new row.\r\n      rowMap[itemRect.top] = [itemRect];\r\n    }\r\n  });\r\n\r\n  // For each row, find the end of the last item, then calculate\r\n  // the remaining space by dividing it by 2. Then add that\r\n  // offset to the x position of each point.\r\n  let rects = [];\r\n  const rows = [];\r\n  const centeredRows = [];\r\n  Object.keys(rowMap).forEach((key) => {\r\n    const itemRects = rowMap[key];\r\n    rows.push(itemRects);\r\n    const lastItem = itemRects[itemRects.length - 1];\r\n    const end = lastItem.left + lastItem.width;\r\n    const offset = Math.round((containerWidth - end) / 2);\r\n\r\n    let finalRects = itemRects;\r\n    let canMove = false;\r\n    if (offset > 0) {\r\n      const newRects = [];\r\n      canMove = itemRects.every((r) => {\r\n        const newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id);\r\n\r\n        // Check all current rects to make sure none overlap.\r\n        const noOverlap = !rects.some(r => Rect.intersects(newRect, r));\r\n\r\n        newRects.push(newRect);\r\n        return noOverlap;\r\n      });\r\n\r\n      // If none of the rectangles overlapped, the whole group can be centered.\r\n      if (canMove) {\r\n        finalRects = newRects;\r\n      }\r\n    }\r\n\r\n    // If the items are not going to be offset, ensure that the original\r\n    // placement for this row will not overlap previous rows (row-spanning\r\n    // elements could be in the way).\r\n    if (!canMove) {\r\n      let intersectingRect;\r\n      const hasOverlap = itemRects.some(itemRect => rects.some((r) => {\r\n        const intersects = Rect.intersects(itemRect, r);\r\n        if (intersects) {\r\n          intersectingRect = r;\r\n        }\r\n        return intersects;\r\n      }));\r\n\r\n      // If there is any overlap, replace the overlapping row with the original.\r\n      if (hasOverlap) {\r\n        const rowIndex = centeredRows.findIndex(items => items.includes(intersectingRect));\r\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\r\n      }\r\n    }\r\n\r\n    rects = rects.concat(finalRects);\r\n    centeredRows.push(finalRects);\r\n  });\r\n\r\n  // Reduce array of arrays to a single array of points.\r\n  // https://stackoverflow.com/a/10865042/373422\r\n  // Then reset sort back to how the items were passed to this method.\r\n  // Remove the wrapper object with index, map to a Point.\r\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\r\n    .sort((a, b) => (a.id - b.id))\r\n    .map(itemRect => new Point(itemRect.left, itemRect.top));\r\n}\r\n","/**\r\n * Hyphenates a javascript style string to a css one. For example:\r\n * MozBoxSizing -> -moz-box-sizing.\r\n * @param {string} str The string to hyphenate.\r\n * @return {string} The hyphenated string.\r\n */\r\nexport default function hyphenate(str) {\r\n  return str.replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`);\r\n}\r\n","import TinyEmitter from 'tiny-emitter';\r\nimport matches from 'matches-selector';\r\nimport throttle from 'throttleit';\r\nimport parallel from 'array-parallel';\r\n\r\nimport Point from './point';\r\nimport Rect from './rect';\r\nimport ShuffleItem from './shuffle-item';\r\nimport Classes from './classes';\r\nimport getNumberStyle from './get-number-style';\r\nimport sorter from './sorter';\r\nimport { onTransitionEnd, cancelTransitionEnd } from './on-transition-end';\r\nimport {\r\n  getItemPosition,\r\n  getColumnSpan,\r\n  getAvailablePositions,\r\n  getShortColumn,\r\n  getCenteredPositions,\r\n} from './layout';\r\nimport arrayMax from './array-max';\r\nimport hyphenate from './hyphenate';\r\n\r\nfunction arrayUnique(x) {\r\n  return Array.from(new Set(x));\r\n}\r\n\r\n// Used for unique instance variables\r\nlet id = 0;\r\n\r\nclass Shuffle extends TinyEmitter {\r\n  /**\r\n   * Categorize, sort, and filter a responsive grid of items.\r\n   *\r\n   * @param {Element} element An element which is the parent container for the grid items.\r\n   * @param {Object} [options=Shuffle.options] Options object.\r\n   * @constructor\r\n   */\r\n  constructor(element, options = {}) {\r\n    super();\r\n    this.options = Object.assign({}, Shuffle.options, options);\r\n\r\n    this.lastSort = {};\r\n    this.group = Shuffle.ALL_ITEMS;\r\n    this.lastFilter = Shuffle.ALL_ITEMS;\r\n    this.isEnabled = true;\r\n    this.isDestroyed = false;\r\n    this.isInitialized = false;\r\n    this._transitions = [];\r\n    this.isTransitioning = false;\r\n    this._queue = [];\r\n\r\n    const el = this._getElementOption(element);\r\n\r\n    if (!el) {\r\n      throw new TypeError('Shuffle needs to be initialized with an element.');\r\n    }\r\n\r\n    this.element = el;\r\n    this.id = 'shuffle_' + id;\r\n    id += 1;\r\n\r\n    this._init();\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  _init() {\r\n    this.items = this._getItems();\r\n\r\n    this.options.sizer = this._getElementOption(this.options.sizer);\r\n\r\n    // Add class and invalidate styles\r\n    this.element.classList.add(Shuffle.Classes.BASE);\r\n\r\n    // Set initial css for each item\r\n    this._initItems(this.items);\r\n\r\n    // Bind resize events\r\n    this._onResize = this._getResizeFunction();\r\n    window.addEventListener('resize', this._onResize);\r\n\r\n    // If the page has not already emitted the `load` event, call layout on load.\r\n    // This avoids layout issues caused by images and fonts loading after the\r\n    // instance has been initialized.\r\n    if (document.readyState !== 'complete') {\r\n      const layout = this.layout.bind(this);\r\n      window.addEventListener('load', function onLoad() {\r\n        window.removeEventListener('load', onLoad);\r\n        layout();\r\n      });\r\n    }\r\n\r\n    // Get container css all in one request. Causes reflow\r\n    const containerCss = window.getComputedStyle(this.element, null);\r\n    const containerWidth = Shuffle.getSize(this.element).width;\r\n\r\n    // Add styles to the container if it doesn't have them.\r\n    this._validateStyles(containerCss);\r\n\r\n    // We already got the container's width above, no need to cause another\r\n    // reflow getting it again... Calculate the number of columns there will be\r\n    this._setColumns(containerWidth);\r\n\r\n    // Kick off!\r\n    this.filter(this.options.group, this.options.initialSort);\r\n\r\n    // The shuffle items haven't had transitions set on them yet so the user\r\n    // doesn't see the first layout. Set them now that the first layout is done.\r\n    // First, however, a synchronous layout must be caused for the previous\r\n    // styles to be applied without transitions.\r\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\r\n    this.setItemTransitions(this.items);\r\n    this.element.style.transition = `height ${this.options.speed}ms ${this.options.easing}`;\r\n  }\r\n\r\n  /**\r\n   * Returns a throttled and proxied function for the resize handler.\r\n   * @return {function}\r\n   * @private\r\n   */\r\n  _getResizeFunction() {\r\n    const resizeFunction = this._handleResize.bind(this);\r\n    return this.options.throttle ?\r\n      this.options.throttle(resizeFunction, this.options.throttleTime) :\r\n      resizeFunction;\r\n  }\r\n\r\n  /**\r\n   * Retrieve an element from an option.\r\n   * @param {string|jQuery|Element} option The option to check.\r\n   * @return {?Element} The plain element or null.\r\n   * @private\r\n   */\r\n  _getElementOption(option) {\r\n    // If column width is a string, treat is as a selector and search for the\r\n    // sizer element within the outermost container\r\n    if (typeof option === 'string') {\r\n      return this.element.querySelector(option);\r\n\r\n    // Check for an element\r\n    } else if (option && option.nodeType && option.nodeType === 1) {\r\n      return option;\r\n\r\n    // Check for jQuery object\r\n    } else if (option && option.jquery) {\r\n      return option[0];\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Ensures the shuffle container has the css styles it needs applied to it.\r\n   * @param {Object} styles Key value pairs for position and overflow.\r\n   * @private\r\n   */\r\n  _validateStyles(styles) {\r\n    // Position cannot be static.\r\n    if (styles.position === 'static') {\r\n      this.element.style.position = 'relative';\r\n    }\r\n\r\n    // Overflow has to be hidden.\r\n    if (styles.overflow !== 'hidden') {\r\n      this.element.style.overflow = 'hidden';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Filter the elements by a category.\r\n   * @param {string|string[]|function(Element):boolean} [category] Category to\r\n   *     filter by. If it's given, the last category will be used to filter the items.\r\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\r\n   *     all the items.\r\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\r\n   * @private\r\n   */\r\n  _filter(category = this.lastFilter, collection = this.items) {\r\n    const set = this._getFilteredSets(category, collection);\r\n\r\n    // Individually add/remove hidden/visible classes\r\n    this._toggleFilterClasses(set);\r\n\r\n    // Save the last filter in case elements are appended.\r\n    this.lastFilter = category;\r\n\r\n    // This is saved mainly because providing a filter function (like searching)\r\n    // will overwrite the `lastFilter` property every time its called.\r\n    if (typeof category === 'string') {\r\n      this.group = category;\r\n    }\r\n\r\n    return set;\r\n  }\r\n\r\n  /**\r\n   * Returns an object containing the visible and hidden elements.\r\n   * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\r\n   * @param {ShuffleItem[]} items A collection of items to filter.\r\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\r\n   * @private\r\n   */\r\n  _getFilteredSets(category, items) {\r\n    let visible = [];\r\n    const hidden = [];\r\n\r\n    // category === 'all', add visible class to everything\r\n    if (category === Shuffle.ALL_ITEMS) {\r\n      visible = items;\r\n\r\n    // Loop through each item and use provided function to determine\r\n    // whether to hide it or not.\r\n    } else {\r\n      items.forEach((item) => {\r\n        if (this._doesPassFilter(category, item.element)) {\r\n          visible.push(item);\r\n        } else {\r\n          hidden.push(item);\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      visible,\r\n      hidden,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test an item to see if it passes a category.\r\n   * @param {string|string[]|function():boolean} category Category or function to filter by.\r\n   * @param {Element} element An element to test.\r\n   * @return {boolean} Whether it passes the category/filter.\r\n   * @private\r\n   */\r\n  _doesPassFilter(category, element) {\r\n    if (typeof category === 'function') {\r\n      return category.call(element, element, this);\r\n    }\r\n\r\n    // Check each element's data-groups attribute against the given category.\r\n    const attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\r\n    const keys = this.options.delimeter ?\r\n      attr.split(this.options.delimeter) :\r\n      JSON.parse(attr);\r\n\r\n    function testCategory(category) {\r\n      return keys.includes(category);\r\n    }\r\n\r\n    if (Array.isArray(category)) {\r\n      if (this.options.filterMode === Shuffle.FilterMode.ANY) {\r\n        return category.some(testCategory);\r\n      }\r\n      return category.every(testCategory);\r\n    }\r\n\r\n    return keys.includes(category);\r\n  }\r\n\r\n  /**\r\n   * Toggles the visible and hidden class names.\r\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\r\n   * @private\r\n   */\r\n  _toggleFilterClasses({ visible, hidden }) {\r\n    visible.forEach((item) => {\r\n      item.show();\r\n    });\r\n\r\n    hidden.forEach((item) => {\r\n      item.hide();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set the initial css for each item\r\n   * @param {ShuffleItem[]} items Set to initialize.\r\n   * @private\r\n   */\r\n  _initItems(items) {\r\n    items.forEach((item) => {\r\n      item.init();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove element reference and styles.\r\n   * @param {ShuffleItem[]} items Set to dispose.\r\n   * @private\r\n   */\r\n  _disposeItems(items) {\r\n    items.forEach((item) => {\r\n      item.dispose();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the visible item count.\r\n   * @private\r\n   */\r\n  _updateItemCount() {\r\n    this.visibleItems = this._getFilteredItems().length;\r\n  }\r\n\r\n  /**\r\n   * Sets css transform transition on a group of elements. This is not executed\r\n   * at the same time as `item.init` so that transitions don't occur upon\r\n   * initialization of a new Shuffle instance.\r\n   * @param {ShuffleItem[]} items Shuffle items to set transitions on.\r\n   * @protected\r\n   */\r\n  setItemTransitions(items) {\r\n    const { speed, easing } = this.options;\r\n    const positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left'];\r\n\r\n    // Allow users to transtion other properties if they exist in the `before`\r\n    // css mapping of the shuffle item.\r\n    const cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map(k => hyphenate(k));\r\n    const properties = positionProps.concat(cssProps).join();\r\n\r\n    items.forEach((item) => {\r\n      item.element.style.transitionDuration = speed + 'ms';\r\n      item.element.style.transitionTimingFunction = easing;\r\n      item.element.style.transitionProperty = properties;\r\n    });\r\n  }\r\n\r\n  _getItems() {\r\n    return Array.from(this.element.children)\r\n      .filter(el => matches(el, this.options.itemSelector))\r\n      .map(el => new ShuffleItem(el));\r\n  }\r\n\r\n  /**\r\n   * When new elements are added to the shuffle container, update the array of\r\n   * items because that is the order `_layout` calls them.\r\n   * @param {ShuffleItem[]} items Items to track.\r\n   * @return {Shuffle[]}\r\n   */\r\n  _mergeNewItems(items) {\r\n    const children = Array.from(this.element.children);\r\n    return sorter(this.items.concat(items), {\r\n      by(element) {\r\n        return children.indexOf(element);\r\n      },\r\n    });\r\n  }\r\n\r\n  _getFilteredItems() {\r\n    return this.items.filter(item => item.isVisible);\r\n  }\r\n\r\n  _getConcealedItems() {\r\n    return this.items.filter(item => !item.isVisible);\r\n  }\r\n\r\n  /**\r\n   * Returns the column size, based on column width and sizer options.\r\n   * @param {number} containerWidth Size of the parent container.\r\n   * @param {number} gutterSize Size of the gutters.\r\n   * @return {number}\r\n   * @private\r\n   */\r\n  _getColumnSize(containerWidth, gutterSize) {\r\n    let size;\r\n\r\n    // If the columnWidth property is a function, then the grid is fluid\r\n    if (typeof this.options.columnWidth === 'function') {\r\n      size = this.options.columnWidth(containerWidth);\r\n\r\n    // columnWidth option isn't a function, are they using a sizing element?\r\n    } else if (this.options.sizer) {\r\n      size = Shuffle.getSize(this.options.sizer).width;\r\n\r\n    // if not, how about the explicitly set option?\r\n    } else if (this.options.columnWidth) {\r\n      size = this.options.columnWidth;\r\n\r\n    // or use the size of the first item\r\n    } else if (this.items.length > 0) {\r\n      size = Shuffle.getSize(this.items[0].element, true).width;\r\n\r\n    // if there's no items, use size of container\r\n    } else {\r\n      size = containerWidth;\r\n    }\r\n\r\n    // Don't let them set a column width of zero.\r\n    if (size === 0) {\r\n      size = containerWidth;\r\n    }\r\n\r\n    return size + gutterSize;\r\n  }\r\n\r\n  /**\r\n   * Returns the gutter size, based on gutter width and sizer options.\r\n   * @param {number} containerWidth Size of the parent container.\r\n   * @return {number}\r\n   * @private\r\n   */\r\n  _getGutterSize(containerWidth) {\r\n    let size;\r\n    if (typeof this.options.gutterWidth === 'function') {\r\n      size = this.options.gutterWidth(containerWidth);\r\n    } else if (this.options.sizer) {\r\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\r\n    } else {\r\n      size = this.options.gutterWidth;\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Calculate the number of columns to be used. Gets css if using sizer element.\r\n   * @param {number} [containerWidth] Optionally specify a container width if\r\n   *    it's already available.\r\n   */\r\n  _setColumns(containerWidth = Shuffle.getSize(this.element).width) {\r\n    const gutter = this._getGutterSize(containerWidth);\r\n    const columnWidth = this._getColumnSize(containerWidth, gutter);\r\n    let calculatedColumns = (containerWidth + gutter) / columnWidth;\r\n\r\n    // Widths given from getStyles are not precise enough...\r\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) <\r\n        this.options.columnThreshold) {\r\n      // e.g. calculatedColumns = 11.998876\r\n      calculatedColumns = Math.round(calculatedColumns);\r\n    }\r\n\r\n    this.cols = Math.max(Math.floor(calculatedColumns), 1);\r\n    this.containerWidth = containerWidth;\r\n    this.colWidth = columnWidth;\r\n  }\r\n\r\n  /**\r\n   * Adjust the height of the grid\r\n   */\r\n  _setContainerSize() {\r\n    this.element.style.height = this._getContainerSize() + 'px';\r\n  }\r\n\r\n  /**\r\n   * Based on the column heights, it returns the biggest one.\r\n   * @return {number}\r\n   * @private\r\n   */\r\n  _getContainerSize() {\r\n    return arrayMax(this.positions);\r\n  }\r\n\r\n  /**\r\n   * Get the clamped stagger amount.\r\n   * @param {number} index Index of the item to be staggered.\r\n   * @return {number}\r\n   */\r\n  _getStaggerAmount(index) {\r\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\r\n  }\r\n\r\n  /**\r\n   * Emit an event from this instance.\r\n   * @param {string} name Event name.\r\n   * @param {Object} [data={}] Optional object data.\r\n   */\r\n  _dispatch(name, data = {}) {\r\n    if (this.isDestroyed) {\r\n      return;\r\n    }\r\n\r\n    data.shuffle = this;\r\n    this.emit(name, data);\r\n  }\r\n\r\n  /**\r\n   * Zeros out the y columns array, which is used to determine item placement.\r\n   * @private\r\n   */\r\n  _resetCols() {\r\n    let i = this.cols;\r\n    this.positions = [];\r\n    while (i) {\r\n      i -= 1;\r\n      this.positions.push(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loops through each item that should be shown and calculates the x, y position.\r\n   * @param {ShuffleItem[]} items Array of items that will be shown/layed\r\n   *     out in order in their array.\r\n   */\r\n  _layout(items) {\r\n    const itemPositions = this._getNextPositions(items);\r\n\r\n    let count = 0;\r\n    items.forEach((item, i) => {\r\n      function callback() {\r\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\r\n      }\r\n\r\n      // If the item will not change its position, do not add it to the render\r\n      // queue. Transitions don't fire when setting a property to the same value.\r\n      if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\r\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\r\n        callback();\r\n        return;\r\n      }\r\n\r\n      item.point = itemPositions[i];\r\n      item.scale = ShuffleItem.Scale.VISIBLE;\r\n      item.isHidden = false;\r\n\r\n      // Clone the object so that the `before` object isn't modified when the\r\n      // transition delay is added.\r\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\r\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\r\n\r\n      this._queue.push({\r\n        item,\r\n        styles,\r\n        callback,\r\n      });\r\n\r\n      count += 1;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return an array of Point instances representing the future positions of\r\n   * each item.\r\n   * @param {ShuffleItem[]} items Array of sorted shuffle items.\r\n   * @return {Point[]}\r\n   * @private\r\n   */\r\n  _getNextPositions(items) {\r\n    // If position data is going to be changed, add the item's size to the\r\n    // transformer to allow for calculations.\r\n    if (this.options.isCentered) {\r\n      const itemsData = items.map((item, i) => {\r\n        const itemSize = Shuffle.getSize(item.element, true);\r\n        const point = this._getItemPosition(itemSize);\r\n        return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\r\n      });\r\n\r\n      return this.getTransformedPositions(itemsData, this.containerWidth);\r\n    }\r\n\r\n    // If no transforms are going to happen, simply return an array of the\r\n    // future points of each item.\r\n    return items.map(item => this._getItemPosition(Shuffle.getSize(item.element, true)));\r\n  }\r\n\r\n  /**\r\n   * Determine the location of the next item, based on its size.\r\n   * @param {{width: number, height: number}} itemSize Object with width and height.\r\n   * @return {Point}\r\n   * @private\r\n   */\r\n  _getItemPosition(itemSize) {\r\n    return getItemPosition({\r\n      itemSize,\r\n      positions: this.positions,\r\n      gridSize: this.colWidth,\r\n      total: this.cols,\r\n      threshold: this.options.columnThreshold,\r\n      buffer: this.options.buffer,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Mutate positions before they're applied.\r\n   * @param {Rect[]} itemRects Item data objects.\r\n   * @param {number} containerWidth Width of the containing element.\r\n   * @return {Point[]}\r\n   * @protected\r\n   */\r\n  getTransformedPositions(itemRects, containerWidth) {\r\n    return getCenteredPositions(itemRects, containerWidth);\r\n  }\r\n\r\n  /**\r\n   * Hides the elements that don't match our filter.\r\n   * @param {ShuffleItem[]} collection Collection to shrink.\r\n   * @private\r\n   */\r\n  _shrink(collection = this._getConcealedItems()) {\r\n    let count = 0;\r\n    collection.forEach((item) => {\r\n      function callback() {\r\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\r\n      }\r\n\r\n      // Continuing would add a transitionend event listener to the element, but\r\n      // that listener would not execute because the transform and opacity would\r\n      // stay the same.\r\n      // The callback is executed here because it is not guaranteed to be called\r\n      // after the transitionend event because the transitionend could be\r\n      // canceled if another animation starts.\r\n      if (item.isHidden) {\r\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\r\n        callback();\r\n        return;\r\n      }\r\n\r\n      item.scale = ShuffleItem.Scale.HIDDEN;\r\n      item.isHidden = true;\r\n\r\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\r\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\r\n\r\n      this._queue.push({\r\n        item,\r\n        styles,\r\n        callback,\r\n      });\r\n\r\n      count += 1;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Resize handler.\r\n   * @private\r\n   */\r\n  _handleResize() {\r\n    // If shuffle is disabled, destroyed, don't do anything\r\n    if (!this.isEnabled || this.isDestroyed) {\r\n      return;\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  /**\r\n   * Returns styles which will be applied to the an item for a transition.\r\n   * @param {ShuffleItem} item Item to get styles for. Should have updated\r\n   *   scale and point properties.\r\n   * @param {Object} styleObject Extra styles that will be used in the transition.\r\n   * @return {!Object} Transforms for transitions, left/top for animate.\r\n   * @protected\r\n   */\r\n  getStylesForTransition(item, styleObject) {\r\n    // Clone the object to avoid mutating the original.\r\n    const styles = Object.assign({}, styleObject);\r\n\r\n    if (this.options.useTransforms) {\r\n      const x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\r\n      const y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\r\n      styles.transform = `translate(${x}px, ${y}px) scale(${item.scale})`;\r\n    } else {\r\n      styles.left = item.point.x + 'px';\r\n      styles.top = item.point.y + 'px';\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  /**\r\n   * Listen for the transition end on an element and execute the itemCallback\r\n   * when it finishes.\r\n   * @param {Element} element Element to listen on.\r\n   * @param {function} itemCallback Callback for the item.\r\n   * @param {function} done Callback to notify `parallel` that this one is done.\r\n   */\r\n  _whenTransitionDone(element, itemCallback, done) {\r\n    const id = onTransitionEnd(element, (evt) => {\r\n      itemCallback();\r\n      done(null, evt);\r\n    });\r\n\r\n    this._transitions.push(id);\r\n  }\r\n\r\n  /**\r\n   * Return a function which will set CSS styles and call the `done` function\r\n   * when (if) the transition finishes.\r\n   * @param {Object} opts Transition object.\r\n   * @return {function} A function to be called with a `done` function.\r\n   */\r\n  _getTransitionFunction(opts) {\r\n    return (done) => {\r\n      opts.item.applyCss(opts.styles);\r\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute the styles gathered in the style queue. This applies styles to elements,\r\n   * triggering transitions.\r\n   * @private\r\n   */\r\n  _processQueue() {\r\n    if (this.isTransitioning) {\r\n      this._cancelMovement();\r\n    }\r\n\r\n    const hasSpeed = this.options.speed > 0;\r\n    const hasQueue = this._queue.length > 0;\r\n\r\n    if (hasQueue && hasSpeed && this.isInitialized) {\r\n      this._startTransitions(this._queue);\r\n    } else if (hasQueue) {\r\n      this._styleImmediately(this._queue);\r\n      this._dispatch(Shuffle.EventType.LAYOUT);\r\n\r\n    // A call to layout happened, but none of the newly visible items will\r\n    // change position or the transition duration is zero, which will not trigger\r\n    // the transitionend event.\r\n    } else {\r\n      this._dispatch(Shuffle.EventType.LAYOUT);\r\n    }\r\n\r\n    // Remove everything in the style queue\r\n    this._queue.length = 0;\r\n  }\r\n\r\n  /**\r\n   * Wait for each transition to finish, the emit the layout event.\r\n   * @param {Object[]} transitions Array of transition objects.\r\n   */\r\n  _startTransitions(transitions) {\r\n    // Set flag that shuffle is currently in motion.\r\n    this.isTransitioning = true;\r\n\r\n    // Create an array of functions to be called.\r\n    const callbacks = transitions.map(obj => this._getTransitionFunction(obj));\r\n\r\n    parallel(callbacks, this._movementFinished.bind(this));\r\n  }\r\n\r\n  _cancelMovement() {\r\n    // Remove the transition end event for each listener.\r\n    this._transitions.forEach(cancelTransitionEnd);\r\n\r\n    // Reset the array.\r\n    this._transitions.length = 0;\r\n\r\n    // Show it's no longer active.\r\n    this.isTransitioning = false;\r\n  }\r\n\r\n  /**\r\n   * Apply styles without a transition.\r\n   * @param {Object[]} objects Array of transition objects.\r\n   * @private\r\n   */\r\n  _styleImmediately(objects) {\r\n    if (objects.length) {\r\n      const elements = objects.map(obj => obj.item.element);\r\n\r\n      Shuffle._skipTransitions(elements, () => {\r\n        objects.forEach((obj) => {\r\n          obj.item.applyCss(obj.styles);\r\n          obj.callback();\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  _movementFinished() {\r\n    this._transitions.length = 0;\r\n    this.isTransitioning = false;\r\n    this._dispatch(Shuffle.EventType.LAYOUT);\r\n  }\r\n\r\n  /**\r\n   * The magic. This is what makes the plugin 'shuffle'\r\n   * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\r\n   *     Can be a function, string, or array of strings.\r\n   * @param {Object} [sortObj] A sort object which can sort the visible set\r\n   */\r\n  filter(category, sortObj) {\r\n    if (!this.isEnabled) {\r\n      return;\r\n    }\r\n\r\n    if (!category || (category && category.length === 0)) {\r\n      category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\r\n    }\r\n\r\n    this._filter(category);\r\n\r\n    // Shrink each hidden item\r\n    this._shrink();\r\n\r\n    // How many visible elements?\r\n    this._updateItemCount();\r\n\r\n    // Update transforms on visible elements so they will animate to their new positions.\r\n    this.sort(sortObj);\r\n  }\r\n\r\n  /**\r\n   * Gets the visible elements, sorts them, and passes them to layout.\r\n   * @param {Object} [sortOptions] The options object to pass to `sorter`.\r\n   */\r\n  sort(sortOptions = this.lastSort) {\r\n    if (!this.isEnabled) {\r\n      return;\r\n    }\r\n\r\n    this._resetCols();\r\n\r\n    const items = sorter(this._getFilteredItems(), sortOptions);\r\n\r\n    this._layout(items);\r\n\r\n    // `_layout` always happens after `_shrink`, so it's safe to process the style\r\n    // queue here with styles from the shrink method.\r\n    this._processQueue();\r\n\r\n    // Adjust the height of the container.\r\n    this._setContainerSize();\r\n\r\n    this.lastSort = sortOptions;\r\n  }\r\n\r\n  /**\r\n   * Reposition everything.\r\n   * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\r\n   */\r\n  update(isOnlyLayout = false) {\r\n    if (this.isEnabled) {\r\n      if (!isOnlyLayout) {\r\n        // Get updated colCount\r\n        this._setColumns();\r\n      }\r\n\r\n      // Layout items\r\n      this.sort();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use this instead of `update()` if you don't need the columns and gutters updated\r\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\r\n   * could be off.\r\n   */\r\n  layout() {\r\n    this.update(true);\r\n  }\r\n\r\n  /**\r\n   * New items have been appended to shuffle. Mix them in with the current\r\n   * filter or sort status.\r\n   * @param {Element[]} newItems Collection of new items.\r\n   */\r\n  add(newItems) {\r\n    const items = arrayUnique(newItems).map(el => new ShuffleItem(el));\r\n\r\n    // Add classes and set initial positions.\r\n    this._initItems(items);\r\n\r\n    // Determine which items will go with the current filter.\r\n    this._resetCols();\r\n    const newItemSet = this._filter(this.lastFilter, items);\r\n    const willBeVisible = this._mergeNewItems(newItemSet.visible);\r\n    const sortedVisibleItems = sorter(willBeVisible, this.lastSort);\r\n\r\n    // Layout all items again so that new items get positions.\r\n    // Synchonously apply positions.\r\n    const itemPositions = this._getNextPositions(sortedVisibleItems);\r\n    sortedVisibleItems.forEach((item, i) => {\r\n      if (newItemSet.visible.includes(item)) {\r\n        item.point = itemPositions[i];\r\n        item.scale = ShuffleItem.Scale.HIDDEN;\r\n        item.isHidden = true;\r\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\r\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\r\n        item.applyCss(this.getStylesForTransition(item, {}));\r\n      }\r\n    });\r\n\r\n    // Cause layout so that the styles above are applied.\r\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\r\n\r\n    // Add transition to each item.\r\n    this.setItemTransitions(items);\r\n\r\n    // Update the list of items.\r\n    this.items = this._mergeNewItems(items);\r\n\r\n    // Update layout/visibility of new and old items.\r\n    this.filter(this.lastFilter);\r\n  }\r\n\r\n  /**\r\n   * Disables shuffle from updating dimensions and layout on resize\r\n   */\r\n  disable() {\r\n    this.isEnabled = false;\r\n  }\r\n\r\n  /**\r\n   * Enables shuffle again\r\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\r\n   */\r\n  enable(isUpdateLayout = true) {\r\n    this.isEnabled = true;\r\n    if (isUpdateLayout) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove 1 or more shuffle items.\r\n   * @param {Element[]} elements An array containing one or more\r\n   *     elements in shuffle\r\n   * @return {Shuffle} The shuffle instance.\r\n   */\r\n  remove(elements) {\r\n    if (!elements.length) {\r\n      return;\r\n    }\r\n\r\n    const collection = arrayUnique(elements);\r\n\r\n    const oldItems = collection\r\n      .map(element => this.getItemByElement(element))\r\n      .filter(item => !!item);\r\n\r\n    const handleLayout = () => {\r\n      this._disposeItems(oldItems);\r\n\r\n      // Remove the collection in the callback\r\n      collection.forEach((element) => {\r\n        element.parentNode.removeChild(element);\r\n      });\r\n\r\n      this._dispatch(Shuffle.EventType.REMOVED, { collection });\r\n    };\r\n\r\n    // Hide collection first.\r\n    this._toggleFilterClasses({\r\n      visible: [],\r\n      hidden: oldItems,\r\n    });\r\n\r\n    this._shrink(oldItems);\r\n\r\n    this.sort();\r\n\r\n    // Update the list of items here because `remove` could be called again\r\n    // with an item that is in the process of being removed.\r\n    this.items = this.items.filter(item => !oldItems.includes(item));\r\n    this._updateItemCount();\r\n\r\n    this.once(Shuffle.EventType.LAYOUT, handleLayout);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a shuffle item by its element.\r\n   * @param {Element} element Element to look for.\r\n   * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\r\n   */\r\n  getItemByElement(element) {\r\n    return this.items.find(item => item.element === element);\r\n  }\r\n\r\n  /**\r\n   * Dump the elements currently stored and reinitialize all child elements which\r\n   * match the `itemSelector`.\r\n   */\r\n  resetItems() {\r\n    // Remove refs to current items.\r\n    this._disposeItems(this.items);\r\n    this.isInitialized = false;\r\n\r\n    // Find new items in the DOM.\r\n    this.items = this._getItems();\r\n\r\n    // Set initial styles on the new items.\r\n    this._initItems(this.items);\r\n\r\n    this.once(Shuffle.EventType.LAYOUT, () => {\r\n      // Add transition to each item.\r\n      this.setItemTransitions(this.items);\r\n      this.isInitialized = true;\r\n    });\r\n\r\n    // Lay out all items.\r\n    this.filter(this.lastFilter);\r\n  }\r\n\r\n  /**\r\n   * Destroys shuffle, removes events, styles, and classes\r\n   */\r\n  destroy() {\r\n    this._cancelMovement();\r\n    window.removeEventListener('resize', this._onResize);\r\n\r\n    // Reset container styles\r\n    this.element.classList.remove('shuffle');\r\n    this.element.removeAttribute('style');\r\n\r\n    // Reset individual item styles\r\n    this._disposeItems(this.items);\r\n\r\n    this.items.length = 0;\r\n    this._transitions.length = 0;\r\n\r\n    // Null DOM references\r\n    this.options.sizer = null;\r\n    this.element = null;\r\n\r\n    // Set a flag so if a debounced resize has been triggered,\r\n    // it can first check if it is actually isDestroyed and not doing anything\r\n    this.isDestroyed = true;\r\n    this.isEnabled = false;\r\n  }\r\n\r\n  /**\r\n   * Returns the outer width of an element, optionally including its margins.\r\n   *\r\n   * There are a few different methods for getting the width of an element, none of\r\n   * which work perfectly for all Shuffle's use cases.\r\n   *\r\n   * 1. getBoundingClientRect() `left` and `right` properties.\r\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\r\n   *   elements which have shrunk.\r\n   * 2. The `offsetWidth` property.\r\n   *   - This value stays the same regardless of the elements transform property,\r\n   *   however, it does not return subpixel values.\r\n   * 3. getComputedStyle()\r\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\r\n   *   padding and border when box-sizing: border-box is set, requiring a feature\r\n   *   test and extra work to add the padding back for IE and other browsers which\r\n   *   follow the W3C spec here.\r\n   *\r\n   * @param {Element} element The element.\r\n   * @param {boolean} [includeMargins=false] Whether to include margins.\r\n   * @return {{width: number, height: number}} The width and height.\r\n   */\r\n  static getSize(element, includeMargins = false) {\r\n    // Store the styles so that they can be used by others without asking for it again.\r\n    const styles = window.getComputedStyle(element, null);\r\n    let width = getNumberStyle(element, 'width', styles);\r\n    let height = getNumberStyle(element, 'height', styles);\r\n\r\n    if (includeMargins) {\r\n      const marginLeft = getNumberStyle(element, 'marginLeft', styles);\r\n      const marginRight = getNumberStyle(element, 'marginRight', styles);\r\n      const marginTop = getNumberStyle(element, 'marginTop', styles);\r\n      const marginBottom = getNumberStyle(element, 'marginBottom', styles);\r\n      width += marginLeft + marginRight;\r\n      height += marginTop + marginBottom;\r\n    }\r\n\r\n    return {\r\n      width,\r\n      height,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Change a property or execute a function which will not have a transition\r\n   * @param {Element[]} elements DOM elements that won't be transitioned.\r\n   * @param {function} callback A function which will be called while transition\r\n   *     is set to 0ms.\r\n   * @private\r\n   */\r\n  static _skipTransitions(elements, callback) {\r\n    const zero = '0ms';\r\n\r\n    // Save current duration and delay.\r\n    const data = elements.map((element) => {\r\n      const { style } = element;\r\n      const duration = style.transitionDuration;\r\n      const delay = style.transitionDelay;\r\n\r\n      // Set the duration to zero so it happens immediately\r\n      style.transitionDuration = zero;\r\n      style.transitionDelay = zero;\r\n\r\n      return {\r\n        duration,\r\n        delay,\r\n      };\r\n    });\r\n\r\n    callback();\r\n\r\n    // Cause forced synchronous layout.\r\n    elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\r\n\r\n    // Put the duration back\r\n    elements.forEach((element, i) => {\r\n      element.style.transitionDuration = data[i].duration;\r\n      element.style.transitionDelay = data[i].delay;\r\n    });\r\n  }\r\n}\r\n\r\nShuffle.ShuffleItem = ShuffleItem;\r\n\r\nShuffle.ALL_ITEMS = 'all';\r\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\r\n\r\n/** @enum {string} */\r\nShuffle.EventType = {\r\n  LAYOUT: 'shuffle:layout',\r\n  REMOVED: 'shuffle:removed',\r\n};\r\n\r\n/** @enum {string} */\r\nShuffle.Classes = Classes;\r\n\r\n/** @enum {string} */\r\nShuffle.FilterMode = {\r\n  ANY: 'any',\r\n  ALL: 'all',\r\n};\r\n\r\n// Overrideable options\r\nShuffle.options = {\r\n  // Initial filter group.\r\n  group: Shuffle.ALL_ITEMS,\r\n\r\n  // Transition/animation speed (milliseconds).\r\n  speed: 250,\r\n\r\n  // CSS easing function to use.\r\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\r\n\r\n  // e.g. '.picture-item'.\r\n  itemSelector: '*',\r\n\r\n  // Element or selector string. Use an element to determine the size of columns\r\n  // and gutters.\r\n  sizer: null,\r\n\r\n  // A static number or function that tells the plugin how wide the gutters\r\n  // between columns are (in pixels).\r\n  gutterWidth: 0,\r\n\r\n  // A static number or function that returns a number which tells the plugin\r\n  // how wide the columns are (in pixels).\r\n  columnWidth: 0,\r\n\r\n  // If your group is not json, and is comma delimeted, you could set delimeter\r\n  // to ','.\r\n  delimeter: null,\r\n\r\n  // Useful for percentage based heights when they might not always be exactly\r\n  // the same (in pixels).\r\n  buffer: 0,\r\n\r\n  // Reading the width of elements isn't precise enough and can cause columns to\r\n  // jump between values.\r\n  columnThreshold: 0.01,\r\n\r\n  // Shuffle can be isInitialized with a sort object. It is the same object\r\n  // given to the sort method.\r\n  initialSort: null,\r\n\r\n  // By default, shuffle will throttle resize events. This can be changed or\r\n  // removed.\r\n  throttle,\r\n\r\n  // How often shuffle can be called on resize (in milliseconds).\r\n  throttleTime: 300,\r\n\r\n  // Transition delay offset for each item in milliseconds.\r\n  staggerAmount: 15,\r\n\r\n  // Maximum stagger delay in milliseconds.\r\n  staggerAmountMax: 150,\r\n\r\n  // Whether to use transforms or absolute positioning.\r\n  useTransforms: true,\r\n\r\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\r\n  // the element passes the test if any of its groups are in the array. With \"all\",\r\n  // the element only passes if all groups are in the array.\r\n  filterMode: Shuffle.FilterMode.ANY,\r\n\r\n  // Attempt to center grid items in each row.\r\n  isCentered: false,\r\n\r\n  // Whether to round pixel values used in translate(x, y). This usually avoids\r\n  // blurriness.\r\n  roundTransforms: true,\r\n};\r\n\r\nShuffle.Point = Point;\r\nShuffle.Rect = Rect;\r\n\r\n// Expose for testing. Hack at your own risk.\r\nShuffle.__sorter = sorter;\r\nShuffle.__getColumnSpan = getColumnSpan;\r\nShuffle.__getAvailablePositions = getAvailablePositions;\r\nShuffle.__getShortColumn = getShortColumn;\r\nShuffle.__getCenteredPositions = getCenteredPositions;\r\n\r\nexport default Shuffle;\r\n"],"names":["getNumber","value","parseFloat","Point","x","y","a","b","Rect","w","h","id","left","top","width","height","ShuffleItem","element","isVisible","isHidden","classList","remove","Classes","HIDDEN","add","VISIBLE","removeAttribute","setAttribute","addClasses","SHUFFLE_ITEM","applyCss","Css","INITIAL","scale","Scale","point","classes","forEach","className","obj","keys","key","style","removeClasses","computedSize","document","body","documentElement","e","createElement","cssText","appendChild","window","getComputedStyle","removeChild","ret","getNumberStyle","styles","COMPUTED_SIZE_INCLUDES_PADDING","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","randomize","array","n","length","i","Math","floor","random","temp","defaults","sorter","arr","options","opts","Object","assign","original","Array","from","revert","by","sort","valA","valB","undefined","reverse","transitions","eventName","count","uniqueId","cancelTransitionEnd","removeEventListener","listener","onTransitionEnd","callback","evt","currentTarget","target","addEventListener","arrayMax","max","apply","arrayMin","min","getColumnSpan","itemWidth","columnWidth","columns","threshold","columnSpan","abs","round","ceil","getAvailablePositions","positions","available","push","slice","getShortColumn","buffer","minPosition","len","getItemPosition","itemSize","gridSize","total","span","setY","shortColumnIndex","setHeight","getCenteredPositions","itemRects","containerWidth","rowMap","itemRect","rects","rows","centeredRows","lastItem","end","offset","finalRects","canMove","newRects","every","r","newRect","noOverlap","some","intersects","intersectingRect","hasOverlap","rowIndex","findIndex","items","includes","splice","concat","map","hyphenate","str","replace","m1","toLowerCase","arrayUnique","Set","Shuffle","lastSort","group","ALL_ITEMS","lastFilter","isEnabled","isDestroyed","isInitialized","_transitions","isTransitioning","_queue","el","_getElementOption","TypeError","_init","_getItems","sizer","BASE","_initItems","_onResize","_getResizeFunction","readyState","layout","bind","onLoad","containerCss","getSize","_validateStyles","_setColumns","filter","initialSort","offsetWidth","setItemTransitions","transition","speed","easing","resizeFunction","_handleResize","throttle","throttleTime","option","querySelector","nodeType","jquery","position","overflow","category","collection","set","_getFilteredSets","_toggleFilterClasses","visible","hidden","item","_doesPassFilter","call","attr","getAttribute","FILTER_ATTRIBUTE_KEY","delimeter","split","JSON","parse","testCategory","isArray","filterMode","FilterMode","ANY","show","hide","init","dispose","visibleItems","_getFilteredItems","positionProps","useTransforms","cssProps","before","k","properties","join","transitionDuration","transitionTimingFunction","transitionProperty","children","matches","itemSelector","indexOf","gutterSize","size","gutterWidth","gutter","_getGutterSize","_getColumnSize","calculatedColumns","columnThreshold","cols","colWidth","_getContainerSize","index","staggerAmount","staggerAmountMax","name","data","shuffle","emit","itemPositions","_getNextPositions","after","equals","getStylesForTransition","transitionDelay","_getStaggerAmount","isCentered","itemsData","_getItemPosition","getTransformedPositions","_getConcealedItems","update","styleObject","roundTransforms","transform","itemCallback","done","_whenTransitionDone","_cancelMovement","hasSpeed","hasQueue","_startTransitions","_styleImmediately","_dispatch","EventType","LAYOUT","callbacks","_getTransitionFunction","_movementFinished","objects","elements","_skipTransitions","sortObj","_filter","_shrink","_updateItemCount","sortOptions","_resetCols","_layout","_processQueue","_setContainerSize","isOnlyLayout","newItems","newItemSet","willBeVisible","_mergeNewItems","sortedVisibleItems","isUpdateLayout","oldItems","getItemByElement","handleLayout","_disposeItems","parentNode","REMOVED","once","find","includeMargins","marginLeft","marginRight","marginTop","marginBottom","zero","duration","delay","TinyEmitter","__sorter","__getColumnSpan","__getAvailablePositions","__getShortColumn","__getCenteredPositions"],"mappings":"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"}